
telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006950  08006950  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006950  08006950  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006950  08006950  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d0  20000074  080069cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002444  080069cc  00022444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cecb  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a1e  00000000  00000000  0003d00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  00041a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ad  00000000  00000000  000430d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a899  00000000  00000000  0004327d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018396  00000000  00000000  0005db16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000978b4  00000000  00000000  00075eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a28  00000000  00000000  0010d760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00001310  00000000  00000000  00113188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000028  00000000  00000000  00114498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00000673  00000000  00000000  001144c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <deregister_tm_clones>:
 8000110:	4803      	ldr	r0, [pc, #12]	; (8000120 <deregister_tm_clones+0x10>)
 8000112:	4b04      	ldr	r3, [pc, #16]	; (8000124 <deregister_tm_clones+0x14>)
 8000114:	4283      	cmp	r3, r0
 8000116:	d002      	beq.n	800011e <deregister_tm_clones+0xe>
 8000118:	4b03      	ldr	r3, [pc, #12]	; (8000128 <deregister_tm_clones+0x18>)
 800011a:	b103      	cbz	r3, 800011e <deregister_tm_clones+0xe>
 800011c:	4718      	bx	r3
 800011e:	4770      	bx	lr
 8000120:	20000074 	.word	0x20000074
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000

0800012c <register_tm_clones>:
 800012c:	4805      	ldr	r0, [pc, #20]	; (8000144 <register_tm_clones+0x18>)
 800012e:	4b06      	ldr	r3, [pc, #24]	; (8000148 <register_tm_clones+0x1c>)
 8000130:	1a1b      	subs	r3, r3, r0
 8000132:	0fd9      	lsrs	r1, r3, #31
 8000134:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000138:	1049      	asrs	r1, r1, #1
 800013a:	d002      	beq.n	8000142 <register_tm_clones+0x16>
 800013c:	4b03      	ldr	r3, [pc, #12]	; (800014c <register_tm_clones+0x20>)
 800013e:	b103      	cbz	r3, 8000142 <register_tm_clones+0x16>
 8000140:	4718      	bx	r3
 8000142:	4770      	bx	lr
 8000144:	20000074 	.word	0x20000074
 8000148:	20000074 	.word	0x20000074
 800014c:	00000000 	.word	0x00000000

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <__do_global_dtors_aux+0x1c>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b943      	cbnz	r3, 800016a <__do_global_dtors_aux+0x1a>
 8000158:	f7ff ffda 	bl	8000110 <deregister_tm_clones>
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	b113      	cbz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <__do_global_dtors_aux+0x24>)
 8000162:	f3af 8000 	nop.w
 8000166:	2301      	movs	r3, #1
 8000168:	7023      	strb	r3, [r4, #0]
 800016a:	bd10      	pop	{r4, pc}
 800016c:	20000074 	.word	0x20000074
 8000170:	00000000 	.word	0x00000000
 8000174:	08006798 	.word	0x08006798

08000178 <frame_dummy>:
 8000178:	b508      	push	{r3, lr}
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <frame_dummy+0x18>)
 800017c:	b11b      	cbz	r3, 8000186 <frame_dummy+0xe>
 800017e:	4905      	ldr	r1, [pc, #20]	; (8000194 <frame_dummy+0x1c>)
 8000180:	4805      	ldr	r0, [pc, #20]	; (8000198 <frame_dummy+0x20>)
 8000182:	f3af 8000 	nop.w
 8000186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800018a:	f7ff bfcf 	b.w	800012c <register_tm_clones>
 800018e:	bf00      	nop
 8000190:	00000000 	.word	0x00000000
 8000194:	20000078 	.word	0x20000078
 8000198:	08006798 	.word	0x08006798

0800019c <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 80001a0:	4b23      	ldr	r3, [pc, #140]	; (8000230 <CanFilterSetup+0x94>)
 80001a2:	f24a 0220 	movw	r2, #40992	; 0xa020
 80001a6:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 80001a8:	4b21      	ldr	r3, [pc, #132]	; (8000230 <CanFilterSetup+0x94>)
 80001aa:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80001ae:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 80001b0:	4b1f      	ldr	r3, [pc, #124]	; (8000230 <CanFilterSetup+0x94>)
 80001b2:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 80001b6:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 80001b8:	4b1d      	ldr	r3, [pc, #116]	; (8000230 <CanFilterSetup+0x94>)
 80001ba:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80001be:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001c0:	4b1b      	ldr	r3, [pc, #108]	; (8000230 <CanFilterSetup+0x94>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 80001c6:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <CanFilterSetup+0x94>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80001cc:	4b18      	ldr	r3, [pc, #96]	; (8000230 <CanFilterSetup+0x94>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <CanFilterSetup+0x94>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <CanFilterSetup+0x94>)
 80001da:	2201      	movs	r2, #1
 80001dc:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 80001de:	4b15      	ldr	r3, [pc, #84]	; (8000234 <CanFilterSetup+0x98>)
 80001e0:	f24a 0240 	movw	r2, #41024	; 0xa040
 80001e4:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 80001e6:	4b13      	ldr	r3, [pc, #76]	; (8000234 <CanFilterSetup+0x98>)
 80001e8:	f248 0220 	movw	r2, #32800	; 0x8020
 80001ec:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 80001ee:	4b11      	ldr	r3, [pc, #68]	; (8000234 <CanFilterSetup+0x98>)
 80001f0:	f248 0220 	movw	r2, #32800	; 0x8020
 80001f4:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <CanFilterSetup+0x98>)
 80001f8:	f248 0220 	movw	r2, #32800	; 0x8020
 80001fc:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <CanFilterSetup+0x98>)
 8000200:	2200      	movs	r2, #0
 8000202:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <CanFilterSetup+0x98>)
 8000206:	2201      	movs	r2, #1
 8000208:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <CanFilterSetup+0x98>)
 800020c:	2201      	movs	r2, #1
 800020e:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <CanFilterSetup+0x98>)
 8000212:	2200      	movs	r2, #0
 8000214:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <CanFilterSetup+0x98>)
 8000218:	2201      	movs	r2, #1
 800021a:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 800021c:	4904      	ldr	r1, [pc, #16]	; (8000230 <CanFilterSetup+0x94>)
 800021e:	4806      	ldr	r0, [pc, #24]	; (8000238 <CanFilterSetup+0x9c>)
 8000220:	f000 fd4d 	bl	8000cbe <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8000224:	4903      	ldr	r1, [pc, #12]	; (8000234 <CanFilterSetup+0x98>)
 8000226:	4804      	ldr	r0, [pc, #16]	; (8000238 <CanFilterSetup+0x9c>)
 8000228:	f000 fd49 	bl	8000cbe <HAL_CAN_ConfigFilter>

}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000110 	.word	0x20000110
 8000234:	20000138 	.word	0x20000138
 8000238:	20000090 	.word	0x20000090

0800023c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <MX_CAN_Init+0x64>)
 8000242:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <MX_CAN_Init+0x68>)
 8000244:	601a      	str	r2, [r3, #0]
  // hcan.Init.Prescaler = 4;
  hcan.Init.Prescaler = 16;
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <MX_CAN_Init+0x64>)
 8000248:	2210      	movs	r2, #16
 800024a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <MX_CAN_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <MX_CAN_Init+0x64>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_CAN_Init+0x64>)
 800025a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800025e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <MX_CAN_Init+0x64>)
 8000262:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000266:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <MX_CAN_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_CAN_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <MX_CAN_Init+0x64>)
 8000276:	2200      	movs	r2, #0
 8000278:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_CAN_Init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <MX_CAN_Init+0x64>)
 8000282:	2200      	movs	r2, #0
 8000284:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_CAN_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <MX_CAN_Init+0x64>)
 800028e:	f000 fc1b 	bl	8000ac8 <HAL_CAN_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000298:	f000 fa72 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000090 	.word	0x20000090
 80002a4:	40006400 	.word	0x40006400

080002a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a29      	ldr	r2, [pc, #164]	; (8000368 <HAL_CAN_MspInit+0xc0>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d14b      	bne.n	8000360 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002c8:	4b28      	ldr	r3, [pc, #160]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	4a27      	ldr	r2, [pc, #156]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002d2:	61d3      	str	r3, [r2, #28]
 80002d4:	4b25      	ldr	r3, [pc, #148]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002d6:	69db      	ldr	r3, [r3, #28]
 80002d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002dc:	613b      	str	r3, [r7, #16]
 80002de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a21      	ldr	r2, [pc, #132]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002fe:	2300      	movs	r3, #0
 8000300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	2300      	movs	r3, #0
 8000304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000306:	f107 0314 	add.w	r3, r7, #20
 800030a:	4619      	mov	r1, r3
 800030c:	4818      	ldr	r0, [pc, #96]	; (8000370 <HAL_CAN_MspInit+0xc8>)
 800030e:	f001 faf5 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000318:	2302      	movs	r3, #2
 800031a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031c:	2303      	movs	r3, #3
 800031e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	4619      	mov	r1, r3
 8000326:	4812      	ldr	r0, [pc, #72]	; (8000370 <HAL_CAN_MspInit+0xc8>)
 8000328:	f001 fae8 	bl	80018fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <HAL_CAN_MspInit+0xcc>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	627b      	str	r3, [r7, #36]	; 0x24
 8000332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000334:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
 800033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
 8000342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000348:	627b      	str	r3, [r7, #36]	; 0x24
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <HAL_CAN_MspInit+0xcc>)
 800034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800034e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2105      	movs	r1, #5
 8000354:	2014      	movs	r0, #20
 8000356:	f001 f9f6 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800035a:	2014      	movs	r0, #20
 800035c:	f001 fa0f 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000360:	bf00      	nop
 8000362:	3728      	adds	r7, #40	; 0x28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40006400 	.word	0x40006400
 800036c:	40021000 	.word	0x40021000
 8000370:	40010c00 	.word	0x40010c00
 8000374:	40010000 	.word	0x40010000

08000378 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_CAN_DeactivateNotification(hcan,
 8000380:	2102      	movs	r1, #2
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 fee0 	bl	8001148 <HAL_CAN_DeactivateNotification>
 8000388:	4603      	mov	r3, r0
 800038a:	73fb      	strb	r3, [r7, #15]
    CAN_IT_RX_FIFO0_MSG_PENDING);
    assert_param(status == HAL_OK);

    // osThreadFlagsClear(canReadMessagesTaskHandle);
    osThreadFlagsSet(readCANTaskHandle, CAN_READY);
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2101      	movs	r1, #1
 8000392:	4618      	mov	r0, r3
 8000394:	f003 f916 	bl	80035c4 <osThreadFlagsSet>
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200000b8 	.word	0x200000b8

080003a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  canMessageQueueHandle = osMessageQueueNew(CAN_MESSAGE_QUEUE_SIZE, sizeof(CAN_msg_t), &canMessageQueue_attributes);
 80003a8:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <MX_FREERTOS_Init+0x38>)
 80003aa:	2124      	movs	r1, #36	; 0x24
 80003ac:	200a      	movs	r0, #10
 80003ae:	f003 f997 	bl	80036e0 <osMessageQueueNew>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <MX_FREERTOS_Init+0x3c>)
 80003b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // kernelLEDTaskHandle = osThreadNew(kernelLEDTask, NULL, &kernelLEDTask_attributes);
  
  readCANTaskHandle = osThreadNew(readCANTask, NULL, &readCANTask_attributes);
 80003b8:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <MX_FREERTOS_Init+0x40>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <MX_FREERTOS_Init+0x44>)
 80003be:	f003 f825 	bl	800340c <osThreadNew>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4a09      	ldr	r2, [pc, #36]	; (80003ec <MX_FREERTOS_Init+0x48>)
 80003c6:	6013      	str	r3, [r2, #0]
  transmitMessageTaskHandle = osThreadNew(transmitMessageTask, NULL, &transmitMessageTask_attributes);
 80003c8:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <MX_FREERTOS_Init+0x4c>)
 80003ca:	2100      	movs	r1, #0
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <MX_FREERTOS_Init+0x50>)
 80003ce:	f003 f81d 	bl	800340c <osThreadNew>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <MX_FREERTOS_Init+0x54>)
 80003d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	080068c0 	.word	0x080068c0
 80003e0:	200000c0 	.word	0x200000c0
 80003e4:	08006878 	.word	0x08006878
 80003e8:	080003fd 	.word	0x080003fd
 80003ec:	200000b8 	.word	0x200000b8
 80003f0:	0800689c 	.word	0x0800689c
 80003f4:	08000499 	.word	0x08000499
 80003f8:	200000bc 	.word	0x200000bc

080003fc <readCANTask>:

    osDelay(KERNEL_LED_DELAY);
  }
}

__NO_RETURN void readCANTask(void *argument) {
 80003fc:	b5b0      	push	{r4, r5, r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  static HAL_StatusTypeDef rx_status;
  static CAN_msg_t current_can_message;

  while (1) {
    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 8000404:	2100      	movs	r1, #0
 8000406:	481d      	ldr	r0, [pc, #116]	; (800047c <readCANTask+0x80>)
 8000408:	f000 fe77 	bl	80010fa <HAL_CAN_GetRxFifoFillLevel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d030      	beq.n	8000474 <readCANTask+0x78>
      // there are multiple CAN IDs being passed through the filter, pull out the current message
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 8000412:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <readCANTask+0x84>)
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <readCANTask+0x88>)
 8000416:	2100      	movs	r1, #0
 8000418:	4818      	ldr	r0, [pc, #96]	; (800047c <readCANTask+0x80>)
 800041a:	f000 fd5d 	bl	8000ed8 <HAL_CAN_GetRxMessage>
 800041e:	4603      	mov	r3, r0
 8000420:	461a      	mov	r2, r3
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <readCANTask+0x8c>)
 8000424:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 8000426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042a:	4818      	ldr	r0, [pc, #96]	; (800048c <readCANTask+0x90>)
 800042c:	f001 fc02 	bl	8001c34 <HAL_GPIO_TogglePin>

      // package into CAN_msg_t
      current_can_message.header = can_rx_header;
 8000430:	4a17      	ldr	r2, [pc, #92]	; (8000490 <readCANTask+0x94>)
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <readCANTask+0x88>)
 8000434:	4614      	mov	r4, r2
 8000436:	461d      	mov	r5, r3
 8000438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800043a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      for (uint8_t i=0; i<8; i++) {
 8000444:	2300      	movs	r3, #0
 8000446:	73fb      	strb	r3, [r7, #15]
 8000448:	e00a      	b.n	8000460 <readCANTask+0x64>
        current_can_message.data[i] = current_can_data[i];
 800044a:	7bfa      	ldrb	r2, [r7, #15]
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	490c      	ldr	r1, [pc, #48]	; (8000480 <readCANTask+0x84>)
 8000450:	5c89      	ldrb	r1, [r1, r2]
 8000452:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <readCANTask+0x94>)
 8000454:	4413      	add	r3, r2
 8000456:	460a      	mov	r2, r1
 8000458:	771a      	strb	r2, [r3, #28]
      for (uint8_t i=0; i<8; i++) {
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	3301      	adds	r3, #1
 800045e:	73fb      	strb	r3, [r7, #15]
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	2b07      	cmp	r3, #7
 8000464:	d9f1      	bls.n	800044a <readCANTask+0x4e>
      }

      // priority=0, timeout=0
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <readCANTask+0x98>)
 8000468:	6818      	ldr	r0, [r3, #0]
 800046a:	2300      	movs	r3, #0
 800046c:	2200      	movs	r2, #0
 800046e:	4908      	ldr	r1, [pc, #32]	; (8000490 <readCANTask+0x94>)
 8000470:	f003 f9bc 	bl	80037ec <osMessageQueuePut>
    }
    osDelay(100);
 8000474:	2064      	movs	r0, #100	; 0x64
 8000476:	f003 f905 	bl	8003684 <osDelay>
    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 800047a:	e7c3      	b.n	8000404 <readCANTask+0x8>
 800047c:	20000090 	.word	0x20000090
 8000480:	20000180 	.word	0x20000180
 8000484:	20000160 	.word	0x20000160
 8000488:	200000c4 	.word	0x200000c4
 800048c:	40011000 	.word	0x40011000
 8000490:	200000c8 	.word	0x200000c8
 8000494:	200000c0 	.word	0x200000c0

08000498 <transmitMessageTask>:
  }
}

__NO_RETURN void transmitMessageTask(void *argument) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  static CAN_msg_t can_message;
  osStatus_t queue_status;

  while (1) {
    // retrieve CAN message from queue
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 80004a0:	4b31      	ldr	r3, [pc, #196]	; (8000568 <transmitMessageTask+0xd0>)
 80004a2:	6818      	ldr	r0, [r3, #0]
 80004a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004a8:	2200      	movs	r2, #0
 80004aa:	4930      	ldr	r1, [pc, #192]	; (800056c <transmitMessageTask+0xd4>)
 80004ac:	f003 fa12 	bl	80038d4 <osMessageQueueGet>
 80004b0:	61b8      	str	r0, [r7, #24]

    if (queue_status != osOK) {
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <transmitMessageTask+0x24>
        osThreadYield();
 80004b8:	f003 f852 	bl	8003560 <osThreadYield>
    }

    // TIMESTAMP: 8 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	77fb      	strb	r3, [r7, #31]
 80004c0:	e00c      	b.n	80004dc <transmitMessageTask+0x44>
      // send 'D' as placeholder
      uint8_t c[1] = "D";
 80004c2:	2344      	movs	r3, #68	; 0x44
 80004c4:	733b      	strb	r3, [r7, #12]
      HAL_UART_Transmit(&huart3, c, sizeof(c), 1000);
 80004c6:	f107 010c 	add.w	r1, r7, #12
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	2201      	movs	r2, #1
 80004d0:	4827      	ldr	r0, [pc, #156]	; (8000570 <transmitMessageTask+0xd8>)
 80004d2:	f002 faaa 	bl	8002a2a <HAL_UART_Transmit>
    for (uint8_t i=0; i<8; i++) {
 80004d6:	7ffb      	ldrb	r3, [r7, #31]
 80004d8:	3301      	adds	r3, #1
 80004da:	77fb      	strb	r3, [r7, #31]
 80004dc:	7ffb      	ldrb	r3, [r7, #31]
 80004de:	2b07      	cmp	r3, #7
 80004e0:	d9ef      	bls.n	80004c2 <transmitMessageTask+0x2a>
    }

    // CAN ID: 4 ASCII characters
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 80004e2:	4b22      	ldr	r3, [pc, #136]	; (800056c <transmitMessageTask+0xd4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	75fb      	strb	r3, [r7, #23]
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <transmitMessageTask+0xd4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	75bb      	strb	r3, [r7, #22]

    sendChar(id_h);
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f840 	bl	8000578 <sendChar>
    sendChar(id_l);
 80004f8:	7dbb      	ldrb	r3, [r7, #22]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f83c 	bl	8000578 <sendChar>

    // CAN DATA: 16 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 8000500:	2300      	movs	r3, #0
 8000502:	77bb      	strb	r3, [r7, #30]
 8000504:	e009      	b.n	800051a <transmitMessageTask+0x82>
      // can_stream[2+i] = 0xFFUL & (can_message.data[i]);
      sendChar(can_message.data[i]);
 8000506:	7fbb      	ldrb	r3, [r7, #30]
 8000508:	4a18      	ldr	r2, [pc, #96]	; (800056c <transmitMessageTask+0xd4>)
 800050a:	4413      	add	r3, r2
 800050c:	7f1b      	ldrb	r3, [r3, #28]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f832 	bl	8000578 <sendChar>
    for (uint8_t i=0; i<8; i++) {
 8000514:	7fbb      	ldrb	r3, [r7, #30]
 8000516:	3301      	adds	r3, #1
 8000518:	77bb      	strb	r3, [r7, #30]
 800051a:	7fbb      	ldrb	r3, [r7, #30]
 800051c:	2b07      	cmp	r3, #7
 800051e:	d9f2      	bls.n	8000506 <transmitMessageTask+0x6e>
    }

    // CAN DATA LENGTH: 1 ASCII character
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <transmitMessageTask+0xd4>)
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	f003 030f 	and.w	r3, r3, #15
 8000528:	4a12      	ldr	r2, [pc, #72]	; (8000574 <transmitMessageTask+0xdc>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	757b      	strb	r3, [r7, #21]
    HAL_UART_Transmit(&huart3, &length, 1, 1000);
 800052e:	f107 0115 	add.w	r1, r7, #21
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	2201      	movs	r2, #1
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <transmitMessageTask+0xd8>)
 800053a:	f002 fa76 	bl	8002a2a <HAL_UART_Transmit>

    // NEW LINE: 1 ASCII character
    uint8_t newline[1] = "\n";
 800053e:	230a      	movs	r3, #10
 8000540:	753b      	strb	r3, [r7, #20]
    HAL_UART_Transmit(&huart3, newline, sizeof(newline), 1000);
 8000542:	f107 0114 	add.w	r1, r7, #20
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	2201      	movs	r2, #1
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <transmitMessageTask+0xd8>)
 800054e:	f002 fa6c 	bl	8002a2a <HAL_UART_Transmit>

    // CARRIAGE RETURN: 1 ASCII character
    uint8_t carriage[1] = "\r";
 8000552:	230d      	movs	r3, #13
 8000554:	743b      	strb	r3, [r7, #16]
    HAL_UART_Transmit(&huart3, carriage, sizeof(carriage), 1000);
 8000556:	f107 0110 	add.w	r1, r7, #16
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	2201      	movs	r2, #1
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <transmitMessageTask+0xd8>)
 8000562:	f002 fa62 	bl	8002a2a <HAL_UART_Transmit>
  while (1) {
 8000566:	e79b      	b.n	80004a0 <transmitMessageTask+0x8>
 8000568:	200000c0 	.word	0x200000c0
 800056c:	200000ec 	.word	0x200000ec
 8000570:	200001d0 	.word	0x200001d0
 8000574:	08006810 	.word	0x08006810

08000578 <sendChar>:
  
  // osThreadExit();
}

void sendChar(char c)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_tx_status;

  //Convert to ASCII
  uint8_t c_H = "0123456789ABCDEF"[(c >> 4) & 0xFUL];
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	091b      	lsrs	r3, r3, #4
 8000586:	b2db      	uxtb	r3, r3
 8000588:	f003 030f 	and.w	r3, r3, #15
 800058c:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <sendChar+0x58>)
 800058e:	5cd3      	ldrb	r3, [r2, r3]
 8000590:	73bb      	strb	r3, [r7, #14]
  uint8_t c_L = "0123456789ABCDEF"[ c & 0xFUL];
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 030f 	and.w	r3, r3, #15
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <sendChar+0x58>)
 800059a:	5cd3      	ldrb	r3, [r2, r3]
 800059c:	737b      	strb	r3, [r7, #13]

  uart_tx_status = HAL_UART_Transmit(&huart3, &c_H, 1, 1000);
 800059e:	f107 010e 	add.w	r1, r7, #14
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2201      	movs	r2, #1
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <sendChar+0x5c>)
 80005aa:	f002 fa3e 	bl	8002a2a <HAL_UART_Transmit>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
  uart_tx_status = HAL_UART_Transmit(&huart3, &c_L, 1, 1000);
 80005b2:	f107 010d 	add.w	r1, r7, #13
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	2201      	movs	r2, #1
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <sendChar+0x5c>)
 80005be:	f002 fa34 	bl	8002a2a <HAL_UART_Transmit>
 80005c2:	4603      	mov	r3, r0
 80005c4:	73fb      	strb	r3, [r7, #15]
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	08006810 	.word	0x08006810
 80005d4:	200001d0 	.word	0x200001d0

080005d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <MX_GPIO_Init+0xa8>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a23      	ldr	r2, [pc, #140]	; (8000680 <MX_GPIO_Init+0xa8>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_GPIO_Init+0xa8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0310 	and.w	r3, r3, #16
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_GPIO_Init+0xa8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <MX_GPIO_Init+0xa8>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_GPIO_Init+0xa8>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_GPIO_Init+0xa8>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_GPIO_Init+0xa8>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0xa8>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_GPIO_Init+0xa8>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a11      	ldr	r2, [pc, #68]	; (8000680 <MX_GPIO_Init+0xa8>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0xa8>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_GPIO_Init+0xac>)
 8000654:	f001 fad6 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KERNEL_LED_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2302      	movs	r3, #2
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KERNEL_LED_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_GPIO_Init+0xac>)
 8000672:	f001 f943 	bl	80018fc <HAL_GPIO_Init>

}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	40011000 	.word	0x40011000

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f001 f84f 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 f9e7 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f81b 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f7ff ff9d 	bl	80005d8 <MX_GPIO_Init>
  MX_CAN_Init();
 800069e:	f7ff fdcd 	bl	800023c <MX_CAN_Init>
  MX_USART3_UART_Init();
 80006a2:	f000 f93b 	bl	800091c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // <----- CAN set-up ------>
  CanFilterSetup();
 80006a6:	f7ff fd79 	bl	800019c <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <main+0x40>)
 80006ac:	f000 fbd0 	bl	8000e50 <HAL_CAN_Start>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <main+0x44>)
 80006b6:	701a      	strb	r2, [r3, #0]
  // XBeeInit();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006b8:	f002 fe42 	bl	8003340 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006bc:	f7ff fe72 	bl	80003a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006c0:	f002 fe70 	bl	80033a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x3c>
 80006c6:	bf00      	nop
 80006c8:	20000090 	.word	0x20000090
 80006cc:	2000017c 	.word	0x2000017c

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b090      	sub	sp, #64	; 0x40
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	2228      	movs	r2, #40	; 0x28
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 ff9e 	bl	8006620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800070e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	4618      	mov	r0, r3
 800071a:	f001 faa5 	bl	8001c68 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000724:	f000 f82c 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2102      	movs	r1, #2
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fd12 	bl	800216c <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800074e:	f000 f817 	bl	8000780 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3740      	adds	r7, #64	; 0x40
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076e:	f000 f98f 	bl	8000a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40012c00 	.word	0x40012c00

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <HAL_MspInit+0x68>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_MspInit+0x68>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_MspInit+0x68>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_MspInit+0x68>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <HAL_MspInit+0x68>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x68>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 ffbc 	bl	8001746 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_MspInit+0x6c>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_MspInit+0x6c>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010000 	.word	0x40010000

080007fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	2019      	movs	r0, #25
 8000812:	f000 ff98 	bl	8001746 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000816:	2019      	movs	r0, #25
 8000818:	f000 ffb1 	bl	800177e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <HAL_InitTick+0x9c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a1d      	ldr	r2, [pc, #116]	; (8000898 <HAL_InitTick+0x9c>)
 8000822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <HAL_InitTick+0x9c>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000834:	f107 0210 	add.w	r2, r7, #16
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fe0e 	bl	8002460 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000844:	f001 fdf8 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8000848:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800084a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084c:	4a13      	ldr	r2, [pc, #76]	; (800089c <HAL_InitTick+0xa0>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	0c9b      	lsrs	r3, r3, #18
 8000854:	3b01      	subs	r3, #1
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_InitTick+0xa4>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <HAL_InitTick+0xa8>)
 800085c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_InitTick+0xa4>)
 8000860:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000864:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_InitTick+0xa4>)
 8000868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_InitTick+0xa4>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_InitTick+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <HAL_InitTick+0xa4>)
 800087a:	f001 fe3f 	bl	80024fc <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d104      	bne.n	800088e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <HAL_InitTick+0xa4>)
 8000886:	f001 fe91 	bl	80025ac <HAL_TIM_Base_Start_IT>
 800088a:	4603      	mov	r3, r0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3730      	adds	r7, #48	; 0x30
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	431bde83 	.word	0x431bde83
 80008a0:	20000188 	.word	0x20000188
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
	...

080008d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008da:	f000 fc5b 	bl	8001194 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000090 	.word	0x20000090

080008e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <TIM1_UP_IRQHandler+0x10>)
 80008ee:	f001 feaf 	bl	8002650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000188 	.word	0x20000188

080008fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <USART3_IRQHandler+0x10>)
 8000902:	f002 f925 	bl	8002b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200001d0 	.word	0x200001d0

08000910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_USART3_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 8000928:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800092c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART3_UART_Init+0x4c>)
 8000954:	f002 f81c 	bl	8002990 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f7ff ff0f 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200001d0 	.word	0x200001d0
 800096c:	40004800 	.word	0x40004800

08000970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <HAL_UART_MspInit+0x9c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d139      	bne.n	8000a04 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 8000996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800099a:	61d3      	str	r3, [r2, #28]
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	480f      	ldr	r0, [pc, #60]	; (8000a14 <HAL_UART_MspInit+0xa4>)
 80009d6:	f000 ff91 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <HAL_UART_MspInit+0xa4>)
 80009f0:	f000 ff84 	bl	80018fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2105      	movs	r1, #5
 80009f8:	2027      	movs	r0, #39	; 0x27
 80009fa:	f000 fea4 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009fe:	2027      	movs	r0, #39	; 0x27
 8000a00:	f000 febd 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40004800 	.word	0x40004800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a3e:	f7ff ff67 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f005 fdbb 	bl	80065bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff fe1f 	bl	8000688 <main>
  bx lr
 8000a4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a54:	08006958 	.word	0x08006958
  ldr r2, =_sbss
 8000a58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a5c:	20002444 	.word	0x20002444

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 fe5b 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f7ff febe 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fe84 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000214 	.word	0x20000214

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000214 	.word	0x20000214

08000ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e0ed      	b.n	8000cb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fbde 	bl	80002a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0201 	orr.w	r2, r2, #1
 8000afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000afc:	f7ff ffda 	bl	8000ab4 <HAL_GetTick>
 8000b00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b02:	e012      	b.n	8000b2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b04:	f7ff ffd6 	bl	8000ab4 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d90b      	bls.n	8000b2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2205      	movs	r2, #5
 8000b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e0c5      	b.n	8000cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0e5      	beq.n	8000b04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0202 	bic.w	r2, r2, #2
 8000b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b48:	f7ff ffb4 	bl	8000ab4 <HAL_GetTick>
 8000b4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b4e:	e012      	b.n	8000b76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b50:	f7ff ffb0 	bl	8000ab4 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	2b0a      	cmp	r3, #10
 8000b5c:	d90b      	bls.n	8000b76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e09f      	b.n	8000cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e5      	bne.n	8000b50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7e1b      	ldrb	r3, [r3, #24]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d108      	bne.n	8000b9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7e5b      	ldrb	r3, [r3, #25]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d108      	bne.n	8000bc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7e9b      	ldrb	r3, [r3, #26]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d108      	bne.n	8000bf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0220 	orr.w	r2, r2, #32
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e007      	b.n	8000c02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0220 	bic.w	r2, r2, #32
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7edb      	ldrb	r3, [r3, #27]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d108      	bne.n	8000c1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0210 	bic.w	r2, r2, #16
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e007      	b.n	8000c2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0210 	orr.w	r2, r2, #16
 8000c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7f1b      	ldrb	r3, [r3, #28]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d108      	bne.n	8000c46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f042 0208 	orr.w	r2, r2, #8
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	e007      	b.n	8000c56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0208 	bic.w	r2, r2, #8
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7f5b      	ldrb	r3, [r3, #29]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d108      	bne.n	8000c70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f042 0204 	orr.w	r2, r2, #4
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	e007      	b.n	8000c80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0204 	bic.w	r2, r2, #4
 8000c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	ea42 0103 	orr.w	r1, r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	1e5a      	subs	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b087      	sub	sp, #28
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cd6:	7cfb      	ldrb	r3, [r7, #19]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d003      	beq.n	8000ce4 <HAL_CAN_ConfigFilter+0x26>
 8000cdc:	7cfb      	ldrb	r3, [r7, #19]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	f040 80aa 	bne.w	8000e38 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cea:	f043 0201 	orr.w	r2, r3, #1
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	f003 031f 	and.w	r3, r3, #31
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d123      	bne.n	8000d66 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	401a      	ands	r2, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3248      	adds	r2, #72	; 0x48
 8000d46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d5c:	6979      	ldr	r1, [r7, #20]
 8000d5e:	3348      	adds	r3, #72	; 0x48
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	440b      	add	r3, r1
 8000d64:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d122      	bne.n	8000db4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	431a      	orrs	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3248      	adds	r2, #72	; 0x48
 8000d94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000da8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000daa:	6979      	ldr	r1, [r7, #20]
 8000dac:	3348      	adds	r3, #72	; 0x48
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d109      	bne.n	8000dd0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000dce:	e007      	b.n	8000de0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d109      	bne.n	8000dfc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000dfa:	e007      	b.n	8000e0c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d107      	bne.n	8000e24 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e2a:	f023 0201 	bic.w	r2, r3, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e006      	b.n	8000e46 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
  }
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d12e      	bne.n	8000ec2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2202      	movs	r2, #2
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0201 	bic.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e7c:	f7ff fe1a 	bl	8000ab4 <HAL_GetTick>
 8000e80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e82:	e012      	b.n	8000eaa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e84:	f7ff fe16 	bl	8000ab4 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b0a      	cmp	r3, #10
 8000e90:	d90b      	bls.n	8000eaa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e012      	b.n	8000ed0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e5      	bne.n	8000e84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e006      	b.n	8000ed0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
  }
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d003      	beq.n	8000efc <HAL_CAN_GetRxMessage+0x24>
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	f040 80f3 	bne.w	80010e2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10e      	bne.n	8000f20 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d116      	bne.n	8000f3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0e7      	b.n	80010f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d107      	bne.n	8000f3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0d8      	b.n	80010f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	331b      	adds	r3, #27
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	4413      	add	r3, r2
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0204 	and.w	r2, r3, #4
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10c      	bne.n	8000f76 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	331b      	adds	r3, #27
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	4413      	add	r3, r2
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0d5b      	lsrs	r3, r3, #21
 8000f6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e00b      	b.n	8000f8e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	331b      	adds	r3, #27
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	4413      	add	r3, r2
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	331b      	adds	r3, #27
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4413      	add	r3, r2
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0202 	and.w	r2, r3, #2
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	331b      	adds	r3, #27
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	4413      	add	r3, r2
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 020f 	and.w	r2, r3, #15
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	331b      	adds	r3, #27
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3304      	adds	r3, #4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	331b      	adds	r3, #27
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0c1b      	lsrs	r3, r3, #16
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	4413      	add	r3, r2
 800100c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0a1a      	lsrs	r2, r3, #8
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	4413      	add	r3, r2
 8001026:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0c1a      	lsrs	r2, r3, #16
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3302      	adds	r3, #2
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	0e1a      	lsrs	r2, r3, #24
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3303      	adds	r3, #3
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3304      	adds	r3, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4413      	add	r3, r2
 8001072:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0a1a      	lsrs	r2, r3, #8
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3305      	adds	r3, #5
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4413      	add	r3, r2
 800108c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0c1a      	lsrs	r2, r3, #16
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	3306      	adds	r3, #6
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0e1a      	lsrs	r2, r3, #24
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3307      	adds	r3, #7
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d108      	bne.n	80010ce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0220 	orr.w	r2, r2, #32
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	e007      	b.n	80010de <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0220 	orr.w	r2, r2, #32
 80010dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e006      	b.n	80010f0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
  }
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d002      	beq.n	800111c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d10f      	bne.n	800113c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e005      	b.n	800113c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800113c:	68fb      	ldr	r3, [r7, #12]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001158:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d002      	beq.n	8001166 <HAL_CAN_DeactivateNotification+0x1e>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d10a      	bne.n	800117c <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6959      	ldr	r1, [r3, #20]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	43da      	mvns	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	400a      	ands	r2, r1
 8001176:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	e006      	b.n	800118a <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
  }
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d07c      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d023      	beq.n	800122c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f983 	bl	8001502 <HAL_CAN_TxMailbox0CompleteCallback>
 80011fc:	e016      	b.n	800122c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
 8001210:	e00c      	b.n	800122c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
 8001224:	e002      	b.n	800122c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f986 	bl	8001538 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d024      	beq.n	8001280 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f962 	bl	8001514 <HAL_CAN_TxMailbox1CompleteCallback>
 8001250:	e016      	b.n	8001280 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
 8001264:	e00c      	b.n	8001280 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	e002      	b.n	8001280 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f965 	bl	800154a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d024      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001292:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f941 	bl	8001526 <HAL_CAN_TxMailbox2CompleteCallback>
 80012a4:	e016      	b.n	80012d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
 80012b8:	e00c      	b.n	80012d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	e002      	b.n	80012d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f944 	bl	800155c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00c      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2210      	movs	r2, #16
 80012f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2208      	movs	r2, #8
 8001312:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f92a 	bl	800156e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d009      	beq.n	8001338 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff f820 	bl	8000378 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00c      	beq.n	800135c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001352:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2210      	movs	r2, #16
 800135a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2208      	movs	r2, #8
 8001376:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f90a 	bl	8001592 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	d009      	beq.n	800139c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f8f2 	bl	8001580 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2210      	movs	r2, #16
 80013b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f8f3 	bl	80015a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00b      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2208      	movs	r2, #8
 80013d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f8eb 	bl	80015b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d07b      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d072      	beq.n	80014da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001416:	2b00      	cmp	r3, #0
 8001418:	d008      	beq.n	800142c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800144e:	2b00      	cmp	r3, #0
 8001450:	d043      	beq.n	80014da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001458:	2b00      	cmp	r3, #0
 800145a:	d03e      	beq.n	80014da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001462:	2b60      	cmp	r3, #96	; 0x60
 8001464:	d02b      	beq.n	80014be <HAL_CAN_IRQHandler+0x32a>
 8001466:	2b60      	cmp	r3, #96	; 0x60
 8001468:	d82e      	bhi.n	80014c8 <HAL_CAN_IRQHandler+0x334>
 800146a:	2b50      	cmp	r3, #80	; 0x50
 800146c:	d022      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x320>
 800146e:	2b50      	cmp	r3, #80	; 0x50
 8001470:	d82a      	bhi.n	80014c8 <HAL_CAN_IRQHandler+0x334>
 8001472:	2b40      	cmp	r3, #64	; 0x40
 8001474:	d019      	beq.n	80014aa <HAL_CAN_IRQHandler+0x316>
 8001476:	2b40      	cmp	r3, #64	; 0x40
 8001478:	d826      	bhi.n	80014c8 <HAL_CAN_IRQHandler+0x334>
 800147a:	2b30      	cmp	r3, #48	; 0x30
 800147c:	d010      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x30c>
 800147e:	2b30      	cmp	r3, #48	; 0x30
 8001480:	d822      	bhi.n	80014c8 <HAL_CAN_IRQHandler+0x334>
 8001482:	2b10      	cmp	r3, #16
 8001484:	d002      	beq.n	800148c <HAL_CAN_IRQHandler+0x2f8>
 8001486:	2b20      	cmp	r3, #32
 8001488:	d005      	beq.n	8001496 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800148a:	e01d      	b.n	80014c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001494:	e019      	b.n	80014ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f043 0310 	orr.w	r3, r3, #16
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800149e:	e014      	b.n	80014ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014a8:	e00f      	b.n	80014ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014b2:	e00a      	b.n	80014ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014bc:	e005      	b.n	80014ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014c6:	e000      	b.n	80014ca <HAL_CAN_IRQHandler+0x336>
            break;
 80014c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2204      	movs	r2, #4
 80014e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f867 	bl	80015c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4906      	ldr	r1, [pc, #24]	; (8001674 <__NVIC_EnableIRQ+0x34>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff4f 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff64 	bl	8001624 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ffb2 	bl	80016cc <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff81 	bl	8001678 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff57 	bl	8001640 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d008      	beq.n	80017c2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2204      	movs	r2, #4
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e020      	b.n	8001804 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 020e 	bic.w	r2, r2, #14
 80017d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
	...

08001810 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001822:	2b02      	cmp	r3, #2
 8001824:	d005      	beq.n	8001832 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2204      	movs	r2, #4
 800182a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e051      	b.n	80018d6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 020e 	bic.w	r2, r2, #14
 8001840:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <HAL_DMA_Abort_IT+0xd0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d029      	beq.n	80018b0 <HAL_DMA_Abort_IT+0xa0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <HAL_DMA_Abort_IT+0xd4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d022      	beq.n	80018ac <HAL_DMA_Abort_IT+0x9c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <HAL_DMA_Abort_IT+0xd8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d01a      	beq.n	80018a6 <HAL_DMA_Abort_IT+0x96>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_DMA_Abort_IT+0xdc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d012      	beq.n	80018a0 <HAL_DMA_Abort_IT+0x90>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <HAL_DMA_Abort_IT+0xe0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00a      	beq.n	800189a <HAL_DMA_Abort_IT+0x8a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <HAL_DMA_Abort_IT+0xe4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d102      	bne.n	8001894 <HAL_DMA_Abort_IT+0x84>
 800188e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001892:	e00e      	b.n	80018b2 <HAL_DMA_Abort_IT+0xa2>
 8001894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001898:	e00b      	b.n	80018b2 <HAL_DMA_Abort_IT+0xa2>
 800189a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189e:	e008      	b.n	80018b2 <HAL_DMA_Abort_IT+0xa2>
 80018a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a4:	e005      	b.n	80018b2 <HAL_DMA_Abort_IT+0xa2>
 80018a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018aa:	e002      	b.n	80018b2 <HAL_DMA_Abort_IT+0xa2>
 80018ac:	2310      	movs	r3, #16
 80018ae:	e000      	b.n	80018b2 <HAL_DMA_Abort_IT+0xa2>
 80018b0:	2301      	movs	r3, #1
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_DMA_Abort_IT+0xe8>)
 80018b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
    } 
  }
  return status;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020008 	.word	0x40020008
 80018e4:	4002001c 	.word	0x4002001c
 80018e8:	40020030 	.word	0x40020030
 80018ec:	40020044 	.word	0x40020044
 80018f0:	40020058 	.word	0x40020058
 80018f4:	4002006c 	.word	0x4002006c
 80018f8:	40020000 	.word	0x40020000

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b08b      	sub	sp, #44	; 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	e169      	b.n	8001be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001910:	2201      	movs	r2, #1
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8158 	bne.w	8001bde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a9a      	ldr	r2, [pc, #616]	; (8001b9c <HAL_GPIO_Init+0x2a0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d05e      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001938:	4a98      	ldr	r2, [pc, #608]	; (8001b9c <HAL_GPIO_Init+0x2a0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d875      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800193e:	4a98      	ldr	r2, [pc, #608]	; (8001ba0 <HAL_GPIO_Init+0x2a4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d058      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001944:	4a96      	ldr	r2, [pc, #600]	; (8001ba0 <HAL_GPIO_Init+0x2a4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d86f      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800194a:	4a96      	ldr	r2, [pc, #600]	; (8001ba4 <HAL_GPIO_Init+0x2a8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d052      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001950:	4a94      	ldr	r2, [pc, #592]	; (8001ba4 <HAL_GPIO_Init+0x2a8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d869      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001956:	4a94      	ldr	r2, [pc, #592]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04c      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 800195c:	4a92      	ldr	r2, [pc, #584]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d863      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001962:	4a92      	ldr	r2, [pc, #584]	; (8001bac <HAL_GPIO_Init+0x2b0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d046      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001968:	4a90      	ldr	r2, [pc, #576]	; (8001bac <HAL_GPIO_Init+0x2b0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d85d      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800196e:	2b12      	cmp	r3, #18
 8001970:	d82a      	bhi.n	80019c8 <HAL_GPIO_Init+0xcc>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d859      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <HAL_GPIO_Init+0x80>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019f7 	.word	0x080019f7
 8001980:	080019d1 	.word	0x080019d1
 8001984:	080019e3 	.word	0x080019e3
 8001988:	08001a25 	.word	0x08001a25
 800198c:	08001a2b 	.word	0x08001a2b
 8001990:	08001a2b 	.word	0x08001a2b
 8001994:	08001a2b 	.word	0x08001a2b
 8001998:	08001a2b 	.word	0x08001a2b
 800199c:	08001a2b 	.word	0x08001a2b
 80019a0:	08001a2b 	.word	0x08001a2b
 80019a4:	08001a2b 	.word	0x08001a2b
 80019a8:	08001a2b 	.word	0x08001a2b
 80019ac:	08001a2b 	.word	0x08001a2b
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a2b 	.word	0x08001a2b
 80019bc:	08001a2b 	.word	0x08001a2b
 80019c0:	080019d9 	.word	0x080019d9
 80019c4:	080019ed 	.word	0x080019ed
 80019c8:	4a79      	ldr	r2, [pc, #484]	; (8001bb0 <HAL_GPIO_Init+0x2b4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ce:	e02c      	b.n	8001a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e029      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e024      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	3308      	adds	r3, #8
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e01f      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	330c      	adds	r3, #12
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e01a      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fe:	2304      	movs	r3, #4
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e013      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	611a      	str	r2, [r3, #16]
          break;
 8001a16:	e009      	b.n	8001a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	615a      	str	r2, [r3, #20]
          break;
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          break;
 8001a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d801      	bhi.n	8001a36 <HAL_GPIO_Init+0x13a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	e001      	b.n	8001a3a <HAL_GPIO_Init+0x13e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d802      	bhi.n	8001a48 <HAL_GPIO_Init+0x14c>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x152>
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	210f      	movs	r1, #15
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80b1 	beq.w	8001bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7c:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a4c      	ldr	r2, [pc, #304]	; (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a94:	4a48      	ldr	r2, [pc, #288]	; (8001bb8 <HAL_GPIO_Init+0x2bc>)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a40      	ldr	r2, [pc, #256]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_GPIO_Init+0x1ec>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3f      	ldr	r2, [pc, #252]	; (8001bc0 <HAL_GPIO_Init+0x2c4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3e      	ldr	r2, [pc, #248]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d007      	beq.n	8001ae0 <HAL_GPIO_Init+0x1e4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a3d      	ldr	r2, [pc, #244]	; (8001bc8 <HAL_GPIO_Init+0x2cc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_GPIO_Init+0x1e0>
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001adc:	2304      	movs	r3, #4
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afa:	492f      	ldr	r1, [pc, #188]	; (8001bb8 <HAL_GPIO_Init+0x2bc>)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	492c      	ldr	r1, [pc, #176]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4928      	ldr	r1, [pc, #160]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	491e      	ldr	r1, [pc, #120]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4918      	ldr	r1, [pc, #96]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4914      	ldr	r1, [pc, #80]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d021      	beq.n	8001bd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
 8001b98:	e021      	b.n	8001bde <HAL_GPIO_Init+0x2e2>
 8001b9a:	bf00      	nop
 8001b9c:	10320000 	.word	0x10320000
 8001ba0:	10310000 	.word	0x10310000
 8001ba4:	10220000 	.word	0x10220000
 8001ba8:	10210000 	.word	0x10210000
 8001bac:	10120000 	.word	0x10120000
 8001bb0:	10110000 	.word	0x10110000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	40010c00 	.word	0x40010c00
 8001bc4:	40011000 	.word	0x40011000
 8001bc8:	40011400 	.word	0x40011400
 8001bcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_GPIO_Init+0x304>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4909      	ldr	r1, [pc, #36]	; (8001c00 <HAL_GPIO_Init+0x304>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f47f ae8e 	bne.w	8001910 <HAL_GPIO_Init+0x14>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	372c      	adds	r7, #44	; 0x2c
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c20:	e003      	b.n	8001c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	041a      	lsls	r2, r3, #16
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43d9      	mvns	r1, r3
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	400b      	ands	r3, r1
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	611a      	str	r2, [r3, #16]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e272      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8087 	beq.w	8001d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c88:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d00c      	beq.n	8001cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c94:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d112      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
 8001ca0:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d10b      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d06c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x12c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d168      	bne.n	8001d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e24c      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x76>
 8001cd0:	4b80      	ldr	r3, [pc, #512]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a7f      	ldr	r2, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e02e      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x98>
 8001ce6:	4b7b      	ldr	r3, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a7a      	ldr	r2, [pc, #488]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a77      	ldr	r2, [pc, #476]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0xbc>
 8001d0a:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a71      	ldr	r2, [pc, #452]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d24:	4b6b      	ldr	r3, [pc, #428]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6a      	ldr	r2, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe feb6 	bl	8000ab4 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7fe feb2 	bl	8000ab4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e200      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xe4>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fea2 	bl	8000ab4 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe fe9e 	bl	8000ab4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1ec      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x10c>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da2:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dae:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d11c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
 8001dba:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d116      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e1c0      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4939      	ldr	r1, [pc, #228]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe fe57 	bl	8000ab4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7fe fe53 	bl	8000ab4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1a1      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4927      	ldr	r1, [pc, #156]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe fe36 	bl	8000ab4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fe32 	bl	8000ab4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e180      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03a      	beq.n	8001eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d019      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_RCC_OscConfig+0x274>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7fe fe16 	bl	8000ab4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fe12 	bl	8000ab4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e160      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f000 fb08 	bl	80024c0 <RCC_Delay>
 8001eb0:	e01c      	b.n	8001eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fdfc 	bl	8000ab4 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebe:	e00f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fdf8 	bl	8000ab4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d908      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e146      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	42420000 	.word	0x42420000
 8001edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b92      	ldr	r3, [pc, #584]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e9      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a6 	beq.w	8002046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b8b      	ldr	r3, [pc, #556]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a87      	ldr	r2, [pc, #540]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b85      	ldr	r3, [pc, #532]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b82      	ldr	r3, [pc, #520]	; (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7e      	ldr	r2, [pc, #504]	; (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe fdb9 	bl	8000ab4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7fe fdb5 	bl	8000ab4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e103      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x312>
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a6e      	ldr	r2, [pc, #440]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6213      	str	r3, [r2, #32]
 8001f78:	e02d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x334>
 8001f82:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a69      	ldr	r2, [pc, #420]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a66      	ldr	r2, [pc, #408]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	e01c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x356>
 8001fa4:	4b61      	ldr	r3, [pc, #388]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a60      	ldr	r2, [pc, #384]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b58      	ldr	r3, [pc, #352]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7fe fd69 	bl	8000ab4 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7fe fd65 	bl	8000ab4 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0b1      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x37e>
 8002008:	e014      	b.n	8002034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7fe fd53 	bl	8000ab4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fd4f 	bl	8000ab4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e09b      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	4b40      	ldr	r3, [pc, #256]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ee      	bne.n	8002012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b3c      	ldr	r3, [pc, #240]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a3b      	ldr	r2, [pc, #236]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d061      	beq.n	8002120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d146      	bne.n	80020f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b33      	ldr	r3, [pc, #204]	; (8002134 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fd23 	bl	8000ab4 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe fd1f 	bl	8000ab4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e06d      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d108      	bne.n	80020ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4921      	ldr	r1, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a19      	ldr	r1, [r3, #32]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	430b      	orrs	r3, r1
 80020be:	491b      	ldr	r1, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe fcf3 	bl	8000ab4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7fe fcef 	bl	8000ab4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e03d      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46a>
 80020f0:	e035      	b.n	800215e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7fe fcdc 	bl	8000ab4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fcd8 	bl	8000ab4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e026      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x498>
 800211e:	e01e      	b.n	800215e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e019      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x500>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4965      	ldr	r1, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4936      	ldr	r1, [pc, #216]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7fe fc2a 	bl	8000ab4 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7fe fc26 	bl	8000ab4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d210      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4922      	ldr	r1, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fa6e 	bl	80007fc <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000
 8002330:	40021000 	.word	0x40021000
 8002334:	080068d8 	.word	0x080068d8
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b490      	push	{r4, r7}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002346:	4b29      	ldr	r3, [pc, #164]	; (80023ec <HAL_RCC_GetSysClockFreq+0xac>)
 8002348:	1d3c      	adds	r4, r7, #4
 800234a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002350:	f240 2301 	movw	r3, #513	; 0x201
 8002354:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d002      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 800237a:	2b08      	cmp	r3, #8
 800237c:	d003      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x46>
 800237e:	e02b      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002382:	623b      	str	r3, [r7, #32]
      break;
 8002384:	e02b      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3328      	adds	r3, #40	; 0x28
 8002390:	443b      	add	r3, r7
 8002392:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002396:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d012      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0c5b      	lsrs	r3, r3, #17
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	3328      	adds	r3, #40	; 0x28
 80023ae:	443b      	add	r3, r7
 80023b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	e004      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	623b      	str	r3, [r7, #32]
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023da:	623b      	str	r3, [r7, #32]
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	6a3b      	ldr	r3, [r7, #32]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc90      	pop	{r4, r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	08006850 	.word	0x08006850
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	003d0900 	.word	0x003d0900

080023fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <HAL_RCC_GetHCLKFreq+0x10>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff2 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	080068e8 	.word	0x080068e8

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffde 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	0adb      	lsrs	r3, r3, #11
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	080068e8 	.word	0x080068e8

08002460 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	220f      	movs	r2, #15
 800246e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_RCC_GetClockConfig+0x58>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_RCC_GetClockConfig+0x58>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_GetClockConfig+0x58>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_RCC_GetClockConfig+0x58>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0207 	and.w	r2, r3, #7
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40022000 	.word	0x40022000

080024c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <RCC_Delay+0x34>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <RCC_Delay+0x38>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0a5b      	lsrs	r3, r3, #9
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024dc:	bf00      	nop
  }
  while (Delay --);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	60fa      	str	r2, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f9      	bne.n	80024dc <RCC_Delay+0x1c>
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	20000000 	.word	0x20000000
 80024f8:	10624dd3 	.word	0x10624dd3

080024fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e041      	b.n	8002592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f839 	bl	800259a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f000 f9b4 	bl	80028a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d001      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e03a      	b.n	800263a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <HAL_TIM_Base_Start_IT+0x98>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x58>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ee:	d009      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x58>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_TIM_Base_Start_IT+0x9c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x58>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <HAL_TIM_Base_Start_IT+0xa0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d111      	bne.n	8002628 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d010      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	e007      	b.n	8002638 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800

08002650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b02      	cmp	r3, #2
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0202 	mvn.w	r2, #2
 800267c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8ed 	bl	8002872 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8e0 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f8ef 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0204 	mvn.w	r2, #4
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8c3 	bl	8002872 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8b6 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f8c5 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b08      	cmp	r3, #8
 800270c:	d122      	bne.n	8002754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b08      	cmp	r3, #8
 800271a:	d11b      	bne.n	8002754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0208 	mvn.w	r2, #8
 8002724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2204      	movs	r2, #4
 800272a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f899 	bl	8002872 <HAL_TIM_IC_CaptureCallback>
 8002740:	e005      	b.n	800274e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f88c 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f89b 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b10      	cmp	r3, #16
 8002760:	d122      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b10      	cmp	r3, #16
 800276e:	d11b      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0210 	mvn.w	r2, #16
 8002778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2208      	movs	r2, #8
 800277e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f86f 	bl	8002872 <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f862 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f871 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0201 	mvn.w	r2, #1
 80027cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fd ffc4 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b80      	cmp	r3, #128	; 0x80
 80027e0:	d10e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ec:	2b80      	cmp	r3, #128	; 0x80
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8bf 	bl	800297e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f835 	bl	8002896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b20      	cmp	r3, #32
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0220 	mvn.w	r2, #32
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f88a 	bl	800296c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a29      	ldr	r2, [pc, #164]	; (8002960 <TIM_Base_SetConfig+0xb8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0x30>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x30>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a26      	ldr	r2, [pc, #152]	; (8002964 <TIM_Base_SetConfig+0xbc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x30>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a25      	ldr	r2, [pc, #148]	; (8002968 <TIM_Base_SetConfig+0xc0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <TIM_Base_SetConfig+0xb8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00b      	beq.n	800290a <TIM_Base_SetConfig+0x62>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d007      	beq.n	800290a <TIM_Base_SetConfig+0x62>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <TIM_Base_SetConfig+0xbc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d003      	beq.n	800290a <TIM_Base_SetConfig+0x62>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <TIM_Base_SetConfig+0xc0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d108      	bne.n	800291c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <TIM_Base_SetConfig+0xb8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d103      	bne.n	8002950 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	615a      	str	r2, [r3, #20]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800

0800296c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e03f      	b.n	8002a22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fd ffda 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fc25 	bl	8003224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b08a      	sub	sp, #40	; 0x28
 8002a2e:	af02      	add	r7, sp, #8
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d17c      	bne.n	8002b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_UART_Transmit+0x2c>
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e075      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Transmit+0x3e>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e06e      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2221      	movs	r2, #33	; 0x21
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe f819 	bl	8000ab4 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a98:	d108      	bne.n	8002aac <HAL_UART_Transmit+0x82>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e003      	b.n	8002ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002abc:	e02a      	b.n	8002b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	; 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fa11 	bl	8002ef0 <UART_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e036      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3302      	adds	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e007      	b.n	8002b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1cf      	bne.n	8002abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2140      	movs	r1, #64	; 0x40
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f9e1 	bl	8002ef0 <UART_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e006      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x52>
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa99 	bl	80030d2 <UART_Receive_IT>
      return;
 8002ba0:	e17b      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80b1 	beq.w	8002d0c <HAL_UART_IRQHandler+0x1bc>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x70>
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_UART_IRQHandler+0x90>
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_UART_IRQHandler+0xb0>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f043 0202 	orr.w	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_UART_IRQHandler+0xd0>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00f      	beq.n	8002c4a <HAL_UART_IRQHandler+0xfa>
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <HAL_UART_IRQHandler+0xee>
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0208 	orr.w	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 811e 	beq.w	8002e90 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_UART_IRQHandler+0x11e>
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fa32 	bl	80030d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <HAL_UART_IRQHandler+0x146>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d031      	beq.n	8002cfa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f974 	bl	8002f84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d023      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	4a76      	ldr	r2, [pc, #472]	; (8002ea0 <HAL_UART_IRQHandler+0x350>)
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe fd9e 	bl	8001810 <HAL_DMA_Abort_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e00e      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8ec 	bl	8002ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	e00a      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8e8 	bl	8002ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e006      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8e4 	bl	8002ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d06:	e0c3      	b.n	8002e90 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	bf00      	nop
    return;
 8002d0a:	e0c1      	b.n	8002e90 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 80a1 	bne.w	8002e58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 809b 	beq.w	8002e58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8095 	beq.w	8002e58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04e      	beq.n	8002df0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d5c:	8a3b      	ldrh	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8098 	beq.w	8002e94 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d68:	8a3a      	ldrh	r2, [r7, #16]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	f080 8092 	bcs.w	8002e94 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8a3a      	ldrh	r2, [r7, #16]
 8002d74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d02b      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0210 	bic.w	r2, r2, #16
 8002dcc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fce1 	bl	800179a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f876 	bl	8002eda <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dee:	e051      	b.n	8002e94 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d047      	beq.n	8002e98 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002e08:	8a7b      	ldrh	r3, [r7, #18]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d044      	beq.n	8002e98 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0210 	bic.w	r2, r2, #16
 8002e4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e4c:	8a7b      	ldrh	r3, [r7, #18]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f842 	bl	8002eda <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e56:	e01f      	b.n	8002e98 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_UART_IRQHandler+0x324>
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8c9 	bl	8003004 <UART_Transmit_IT>
    return;
 8002e72:	e012      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_UART_IRQHandler+0x34a>
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f90a 	bl	80030a2 <UART_EndTransmit_IT>
    return;
 8002e8e:	e004      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
    return;
 8002e90:	bf00      	nop
 8002e92:	e002      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
      return;
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
      return;
 8002e98:	bf00      	nop
  }
}
 8002e9a:	3728      	adds	r7, #40	; 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	08002fdd 	.word	0x08002fdd

08002ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f00:	e02c      	b.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f08:	d028      	beq.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f10:	f7fd fdd0 	bl	8000ab4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d21d      	bcs.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e00f      	b.n	8002f7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d0c3      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0210 	bic.w	r2, r2, #16
 8002fc2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ff66 	bl	8002ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b21      	cmp	r3, #33	; 0x21
 8003016:	d13e      	bne.n	8003096 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d114      	bne.n	800304c <UART_Transmit_IT+0x48>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d110      	bne.n	800304c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	621a      	str	r2, [r3, #32]
 800304a:	e008      	b.n	800305e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	1c59      	adds	r1, r3, #1
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6211      	str	r1, [r2, #32]
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29b      	uxth	r3, r3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4619      	mov	r1, r3
 800306c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003080:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003090:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff feee 	bl	8002ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b22      	cmp	r3, #34	; 0x22
 80030e4:	f040 8099 	bne.w	800321a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f0:	d117      	bne.n	8003122 <UART_Receive_IT+0x50>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d113      	bne.n	8003122 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003110:	b29a      	uxth	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	1c9a      	adds	r2, r3, #2
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
 8003120:	e026      	b.n	8003170 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d007      	beq.n	8003146 <UART_Receive_IT+0x74>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <UART_Receive_IT+0x82>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e008      	b.n	8003166 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003160:	b2da      	uxtb	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4619      	mov	r1, r3
 800317e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003180:	2b00      	cmp	r3, #0
 8003182:	d148      	bne.n	8003216 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0220 	bic.w	r2, r2, #32
 8003192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d123      	bne.n	800320c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0210 	bic.w	r2, r2, #16
 80031d8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d10a      	bne.n	80031fe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fe68 	bl	8002eda <HAL_UARTEx_RxEventCallback>
 800320a:	e002      	b.n	8003212 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fe52 	bl	8002eb6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e002      	b.n	800321c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800325e:	f023 030c 	bic.w	r3, r3, #12
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	430b      	orrs	r3, r1
 800326a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2c      	ldr	r2, [pc, #176]	; (8003338 <UART_SetConfig+0x114>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d103      	bne.n	8003294 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800328c:	f7ff f8d4 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	e002      	b.n	800329a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003294:	f7ff f8bc 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009a      	lsls	r2, r3, #2
 80032a4:	441a      	add	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	4a22      	ldr	r2, [pc, #136]	; (800333c <UART_SetConfig+0x118>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	0119      	lsls	r1, r3, #4
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	009a      	lsls	r2, r3, #2
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <UART_SetConfig+0x118>)
 80032d2:	fba3 0302 	umull	r0, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2064      	movs	r0, #100	; 0x64
 80032da:	fb00 f303 	mul.w	r3, r0, r3
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	3332      	adds	r3, #50	; 0x32
 80032e4:	4a15      	ldr	r2, [pc, #84]	; (800333c <UART_SetConfig+0x118>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f0:	4419      	add	r1, r3
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009a      	lsls	r2, r3, #2
 80032fc:	441a      	add	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fbb2 f2f3 	udiv	r2, r2, r3
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <UART_SetConfig+0x118>)
 800330a:	fba3 0302 	umull	r0, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2064      	movs	r0, #100	; 0x64
 8003312:	fb00 f303 	mul.w	r3, r0, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	; 0x32
 800331c:	4a07      	ldr	r2, [pc, #28]	; (800333c <UART_SetConfig+0x118>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	440a      	add	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40013800 	.word	0x40013800
 800333c:	51eb851f 	.word	0x51eb851f

08003340 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003346:	f3ef 8305 	mrs	r3, IPSR
 800334a:	60bb      	str	r3, [r7, #8]
  return(result);
 800334c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003352:	f3ef 8310 	mrs	r3, PRIMASK
 8003356:	607b      	str	r3, [r7, #4]
  return(result);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <osKernelInitialize+0x32>
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <osKernelInitialize+0x60>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d109      	bne.n	800337a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003366:	f3ef 8311 	mrs	r3, BASEPRI
 800336a:	603b      	str	r3, [r7, #0]
  return(result);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003372:	f06f 0305 	mvn.w	r3, #5
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e00c      	b.n	8003394 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <osKernelInitialize+0x60>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <osKernelInitialize+0x60>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e002      	b.n	8003394 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003392:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003394:	68fb      	ldr	r3, [r7, #12]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	20000218 	.word	0x20000218

080033a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033aa:	f3ef 8305 	mrs	r3, IPSR
 80033ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80033b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b6:	f3ef 8310 	mrs	r3, PRIMASK
 80033ba:	607b      	str	r3, [r7, #4]
  return(result);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <osKernelStart+0x32>
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <osKernelStart+0x64>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d109      	bne.n	80033de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033ca:	f3ef 8311 	mrs	r3, BASEPRI
 80033ce:	603b      	str	r3, [r7, #0]
  return(result);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <osKernelStart+0x3a>
    stat = osErrorISR;
 80033d6:	f06f 0305 	mvn.w	r3, #5
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e00e      	b.n	80033fc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <osKernelStart+0x64>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d107      	bne.n	80033f6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <osKernelStart+0x64>)
 80033e8:	2202      	movs	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80033ec:	f001 fb4c 	bl	8004a88 <vTaskStartScheduler>
      stat = osOK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e002      	b.n	80033fc <osKernelStart+0x58>
    } else {
      stat = osError;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033fc:	68fb      	ldr	r3, [r7, #12]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000218 	.word	0x20000218

0800340c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b092      	sub	sp, #72	; 0x48
 8003410:	af04      	add	r7, sp, #16
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800341c:	f3ef 8305 	mrs	r3, IPSR
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 8094 	bne.w	8003552 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	623b      	str	r3, [r7, #32]
  return(result);
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 808d 	bne.w	8003552 <osThreadNew+0x146>
 8003438:	4b48      	ldr	r3, [pc, #288]	; (800355c <osThreadNew+0x150>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d106      	bne.n	800344e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003440:	f3ef 8311 	mrs	r3, BASEPRI
 8003444:	61fb      	str	r3, [r7, #28]
  return(result);
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 8082 	bne.w	8003552 <osThreadNew+0x146>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d07e      	beq.n	8003552 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003458:	2318      	movs	r3, #24
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800345c:	2300      	movs	r3, #0
 800345e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003460:	f107 031b 	add.w	r3, r7, #27
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d045      	beq.n	80034fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <osThreadNew+0x74>
        name = attr->name;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <osThreadNew+0x9a>
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	2b38      	cmp	r3, #56	; 0x38
 8003498:	d805      	bhi.n	80034a6 <osThreadNew+0x9a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <osThreadNew+0x9e>
        return (NULL);
 80034a6:	2300      	movs	r3, #0
 80034a8:	e054      	b.n	8003554 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00e      	beq.n	80034e0 <osThreadNew+0xd4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2bcb      	cmp	r3, #203	; 0xcb
 80034c8:	d90a      	bls.n	80034e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d006      	beq.n	80034e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <osThreadNew+0xd4>
        mem = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034de:	e010      	b.n	8003502 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10c      	bne.n	8003502 <osThreadNew+0xf6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <osThreadNew+0xf6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <osThreadNew+0xf6>
          mem = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fc:	e001      	b.n	8003502 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	2b01      	cmp	r3, #1
 8003506:	d110      	bne.n	800352a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003510:	9202      	str	r2, [sp, #8]
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f001 f8ce 	bl	80046c0 <xTaskCreateStatic>
 8003524:	4603      	mov	r3, r0
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e013      	b.n	8003552 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d110      	bne.n	8003552 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	b29a      	uxth	r2, r3
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f001 f918 	bl	8004778 <xTaskCreate>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d001      	beq.n	8003552 <osThreadNew+0x146>
          hTask = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003552:	697b      	ldr	r3, [r7, #20]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3738      	adds	r7, #56	; 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000218 	.word	0x20000218

08003560 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003566:	f3ef 8305 	mrs	r3, IPSR
 800356a:	60bb      	str	r3, [r7, #8]
  return(result);
 800356c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003572:	f3ef 8310 	mrs	r3, PRIMASK
 8003576:	607b      	str	r3, [r7, #4]
  return(result);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <osThreadYield+0x32>
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <osThreadYield+0x5c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d109      	bne.n	800359a <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003586:	f3ef 8311 	mrs	r3, BASEPRI
 800358a:	603b      	str	r3, [r7, #0]
  return(result);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <osThreadYield+0x3a>
    stat = osErrorISR;
 8003592:	f06f 0305 	mvn.w	r3, #5
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	e009      	b.n	80035ae <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <osThreadYield+0x60>)
 80035a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80035ae:	68fb      	ldr	r3, [r7, #12]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000218 	.word	0x20000218
 80035c0:	e000ed04 	.word	0xe000ed04

080035c4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <osThreadFlagsSet+0x1a>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	da03      	bge.n	80035e6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80035de:	f06f 0303 	mvn.w	r3, #3
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e045      	b.n	8003672 <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ec:	f3ef 8305 	mrs	r3, IPSR
 80035f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80035f2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f8:	f3ef 8310 	mrs	r3, PRIMASK
 80035fc:	617b      	str	r3, [r7, #20]
  return(result);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <osThreadFlagsSet+0x54>
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <osThreadFlagsSet+0xb8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d125      	bne.n	8003658 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800360c:	f3ef 8311 	mrs	r3, BASEPRI
 8003610:	613b      	str	r3, [r7, #16]
  return(result);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01f      	beq.n	8003658 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2300      	movs	r3, #0
 8003624:	2201      	movs	r2, #1
 8003626:	6839      	ldr	r1, [r7, #0]
 8003628:	69f8      	ldr	r0, [r7, #28]
 800362a:	f001 ffc5 	bl	80055b8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	2200      	movs	r2, #0
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	2100      	movs	r1, #0
 800363a:	69f8      	ldr	r0, [r7, #28]
 800363c:	f001 ffbc 	bl	80055b8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <osThreadFlagsSet+0xae>
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <osThreadFlagsSet+0xbc>)
 8003648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	e00c      	b.n	8003672 <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003658:	2300      	movs	r3, #0
 800365a:	2201      	movs	r2, #1
 800365c:	6839      	ldr	r1, [r7, #0]
 800365e:	69f8      	ldr	r0, [r7, #28]
 8003660:	f001 ff00 	bl	8005464 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003664:	f107 030c 	add.w	r3, r7, #12
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	69f8      	ldr	r0, [r7, #28]
 800366e:	f001 fef9 	bl	8005464 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000218 	.word	0x20000218
 8003680:	e000ed04 	.word	0xe000ed04

08003684 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800368c:	f3ef 8305 	mrs	r3, IPSR
 8003690:	613b      	str	r3, [r7, #16]
  return(result);
 8003692:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10f      	bne.n	80036b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	60fb      	str	r3, [r7, #12]
  return(result);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <osDelay+0x34>
 80036a4:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <osDelay+0x58>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d109      	bne.n	80036c0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036ac:	f3ef 8311 	mrs	r3, BASEPRI
 80036b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <osDelay+0x3c>
    stat = osErrorISR;
 80036b8:	f06f 0305 	mvn.w	r3, #5
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	e007      	b.n	80036d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f001 f9a8 	bl	8004a20 <vTaskDelay>
    }
  }

  return (stat);
 80036d0:	697b      	ldr	r3, [r7, #20]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000218 	.word	0x20000218

080036e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	; 0x30
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036f0:	f3ef 8305 	mrs	r3, IPSR
 80036f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80036f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d16f      	bne.n	80037dc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	617b      	str	r3, [r7, #20]
  return(result);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d169      	bne.n	80037dc <osMessageQueueNew+0xfc>
 8003708:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <osMessageQueueNew+0x108>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d105      	bne.n	800371c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003710:	f3ef 8311 	mrs	r3, BASEPRI
 8003714:	613b      	str	r3, [r7, #16]
  return(result);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d15f      	bne.n	80037dc <osMessageQueueNew+0xfc>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d05c      	beq.n	80037dc <osMessageQueueNew+0xfc>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d059      	beq.n	80037dc <osMessageQueueNew+0xfc>
    mem = -1;
 8003728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800372c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d029      	beq.n	8003788 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <osMessageQueueNew+0x82>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b4f      	cmp	r3, #79	; 0x4f
 8003742:	d90e      	bls.n	8003762 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	429a      	cmp	r2, r3
 800375a:	d302      	bcc.n	8003762 <osMessageQueueNew+0x82>
        mem = 1;
 800375c:	2301      	movs	r3, #1
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	e014      	b.n	800378c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d110      	bne.n	800378c <osMessageQueueNew+0xac>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <osMessageQueueNew+0xac>
          mem = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
 8003786:	e001      	b.n	800378c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10b      	bne.n	80037aa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2100      	movs	r1, #0
 800379c:	9100      	str	r1, [sp, #0]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fa53 	bl	8003c4c <xQueueGenericCreateStatic>
 80037a6:	6278      	str	r0, [r7, #36]	; 0x24
 80037a8:	e008      	b.n	80037bc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80037b0:	2200      	movs	r2, #0
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fac0 	bl	8003d3a <xQueueGenericCreate>
 80037ba:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e001      	b.n	80037d4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80037d4:	69f9      	ldr	r1, [r7, #28]
 80037d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037d8:	f000 ff16 	bl	8004608 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000218 	.word	0x20000218

080037ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003800:	2300      	movs	r3, #0
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003804:	f3ef 8305 	mrs	r3, IPSR
 8003808:	61fb      	str	r3, [r7, #28]
  return(result);
 800380a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003810:	f3ef 8310 	mrs	r3, PRIMASK
 8003814:	61bb      	str	r3, [r7, #24]
  return(result);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <osMessageQueuePut+0x44>
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <osMessageQueuePut+0xe0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d12e      	bne.n	8003882 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003824:	f3ef 8311 	mrs	r3, BASEPRI
 8003828:	617b      	str	r3, [r7, #20]
  return(result);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d028      	beq.n	8003882 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <osMessageQueuePut+0x56>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <osMessageQueuePut+0x56>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003842:	f06f 0303 	mvn.w	r3, #3
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003848:	e039      	b.n	80038be <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800384e:	f107 0210 	add.w	r2, r7, #16
 8003852:	2300      	movs	r3, #0
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	6a38      	ldr	r0, [r7, #32]
 8003858:	f000 fbce 	bl	8003ff8 <xQueueGenericSendFromISR>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d003      	beq.n	800386a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003862:	f06f 0302 	mvn.w	r3, #2
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003868:	e029      	b.n	80038be <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d026      	beq.n	80038be <osMessageQueuePut+0xd2>
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <osMessageQueuePut+0xe4>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003880:	e01d      	b.n	80038be <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <osMessageQueuePut+0xa2>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800388e:	f06f 0303 	mvn.w	r3, #3
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e014      	b.n	80038c0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003896:	2300      	movs	r3, #0
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	6a38      	ldr	r0, [r7, #32]
 800389e:	f000 faad 	bl	8003dfc <xQueueGenericSend>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d00b      	beq.n	80038c0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80038ae:	f06f 0301 	mvn.w	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e004      	b.n	80038c0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80038b6:	f06f 0302 	mvn.w	r3, #2
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	e000      	b.n	80038c0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3728      	adds	r7, #40	; 0x28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000218 	.word	0x20000218
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038ea:	f3ef 8305 	mrs	r3, IPSR
 80038ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80038f0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f6:	f3ef 8310 	mrs	r3, PRIMASK
 80038fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <osMessageQueueGet+0x42>
 8003902:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <osMessageQueueGet+0xdc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d12e      	bne.n	8003968 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800390a:	f3ef 8311 	mrs	r3, BASEPRI
 800390e:	617b      	str	r3, [r7, #20]
  return(result);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d028      	beq.n	8003968 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <osMessageQueueGet+0x54>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <osMessageQueueGet+0x54>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003928:	f06f 0303 	mvn.w	r3, #3
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800392e:	e038      	b.n	80039a2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	461a      	mov	r2, r3
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	6a38      	ldr	r0, [r7, #32]
 800393e:	f000 fcd3 	bl	80042e8 <xQueueReceiveFromISR>
 8003942:	4603      	mov	r3, r0
 8003944:	2b01      	cmp	r3, #1
 8003946:	d003      	beq.n	8003950 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003948:	f06f 0302 	mvn.w	r3, #2
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800394e:	e028      	b.n	80039a2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d025      	beq.n	80039a2 <osMessageQueueGet+0xce>
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <osMessageQueueGet+0xe0>)
 8003958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003966:	e01c      	b.n	80039a2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <osMessageQueueGet+0xa0>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d103      	bne.n	800397c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003974:	f06f 0303 	mvn.w	r3, #3
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	e013      	b.n	80039a4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	6a38      	ldr	r0, [r7, #32]
 8003982:	f000 fbd1 	bl	8004128 <xQueueReceive>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d00b      	beq.n	80039a4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003992:	f06f 0301 	mvn.w	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	e004      	b.n	80039a4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800399a:	f06f 0302 	mvn.w	r3, #2
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	e000      	b.n	80039a4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039a2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3728      	adds	r7, #40	; 0x28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000218 	.word	0x20000218
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <vApplicationGetIdleTaskMemory+0x28>)
 80039c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4a05      	ldr	r2, [pc, #20]	; (80039e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80039ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	601a      	str	r2, [r3, #0]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	2000021c 	.word	0x2000021c
 80039e4:	200002e8 	.word	0x200002e8

080039e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <vApplicationGetTimerTaskMemory+0x2c>)
 80039f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4a06      	ldr	r2, [pc, #24]	; (8003a18 <vApplicationGetTimerTaskMemory+0x30>)
 80039fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a06:	601a      	str	r2, [r3, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	200004e8 	.word	0x200004e8
 8003a18:	200005b4 	.word	0x200005b4

08003a1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f103 0208 	add.w	r2, r3, #8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f103 0208 	add.w	r2, r3, #8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f103 0208 	add.w	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ace:	d103      	bne.n	8003ad8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e00c      	b.n	8003af2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3308      	adds	r3, #8
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e002      	b.n	8003ae6 <vListInsert+0x2e>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d2f6      	bcs.n	8003ae0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6892      	ldr	r2, [r2, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6852      	ldr	r2, [r2, #4]
 8003b48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d103      	bne.n	8003b5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	1e5a      	subs	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
	...

08003b7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ba6:	f002 fa31 	bl	800600c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	68f9      	ldr	r1, [r7, #12]
 8003bda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	441a      	add	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	22ff      	movs	r2, #255	; 0xff
 8003bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	22ff      	movs	r2, #255	; 0xff
 8003bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d114      	bne.n	8003c26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01a      	beq.n	8003c3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3310      	adds	r3, #16
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 f9d9 	bl	8004fc0 <xTaskRemoveFromEventList>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d012      	beq.n	8003c3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <xQueueGenericReset+0xcc>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	e009      	b.n	8003c3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3310      	adds	r3, #16
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fef6 	bl	8003a1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3324      	adds	r3, #36	; 0x24
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fef1 	bl	8003a1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c3a:	f002 fa17 	bl	800606c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c3e:	2301      	movs	r3, #1
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08e      	sub	sp, #56	; 0x38
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <xQueueGenericCreateStatic+0x52>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <xQueueGenericCreateStatic+0x56>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <xQueueGenericCreateStatic+0x58>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	623b      	str	r3, [r7, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <xQueueGenericCreateStatic+0x7e>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <xQueueGenericCreateStatic+0x82>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <xQueueGenericCreateStatic+0x84>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	61fb      	str	r3, [r7, #28]
}
 8003ce6:	bf00      	nop
 8003ce8:	e7fe      	b.n	8003ce8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cea:	2350      	movs	r3, #80	; 0x50
 8003cec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b50      	cmp	r3, #80	; 0x50
 8003cf2:	d00a      	beq.n	8003d0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	61bb      	str	r3, [r7, #24]
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f843 	bl	8003db6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3730      	adds	r7, #48	; 0x30
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b08a      	sub	sp, #40	; 0x28
 8003d3e:	af02      	add	r7, sp, #8
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	4613      	mov	r3, r2
 8003d46:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	613b      	str	r3, [r7, #16]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e004      	b.n	8003d7a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3350      	adds	r3, #80	; 0x50
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fa44 	bl	800620c <pvPortMalloc>
 8003d84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00f      	beq.n	8003dac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	3350      	adds	r3, #80	; 0x50
 8003d90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d9a:	79fa      	ldrb	r2, [r7, #7]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f805 	bl	8003db6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003dac:	69bb      	ldr	r3, [r7, #24]
	}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e002      	b.n	8003dd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003de4:	2101      	movs	r1, #1
 8003de6:	69b8      	ldr	r0, [r7, #24]
 8003de8:	f7ff fec8 	bl	8003b7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08e      	sub	sp, #56	; 0x38
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <xQueueGenericSend+0x32>
	__asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <xQueueGenericSend+0x40>
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <xQueueGenericSend+0x44>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <xQueueGenericSend+0x46>
 8003e40:	2300      	movs	r3, #0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <xQueueGenericSend+0x60>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e58:	bf00      	nop
 8003e5a:	e7fe      	b.n	8003e5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d103      	bne.n	8003e6a <xQueueGenericSend+0x6e>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <xQueueGenericSend+0x72>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <xQueueGenericSend+0x74>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <xQueueGenericSend+0x8e>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	623b      	str	r3, [r7, #32]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e8a:	f001 fa5f 	bl	800534c <xTaskGetSchedulerState>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <xQueueGenericSend+0x9e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <xQueueGenericSend+0xa2>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <xQueueGenericSend+0xa4>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <xQueueGenericSend+0xbe>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	61fb      	str	r3, [r7, #28]
}
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eba:	f002 f8a7 	bl	800600c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <xQueueGenericSend+0xd4>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d129      	bne.n	8003f24 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ed6:	f000 fa87 	bl	80043e8 <prvCopyDataToQueue>
 8003eda:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 f869 	bl	8004fc0 <xTaskRemoveFromEventList>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d013      	beq.n	8003f1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ef4:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <xQueueGenericSend+0x1f8>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	e00a      	b.n	8003f1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f0c:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <xQueueGenericSend+0x1f8>)
 8003f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f1c:	f002 f8a6 	bl	800606c <vPortExitCritical>
				return pdPASS;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e063      	b.n	8003fec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f2a:	f002 f89f 	bl	800606c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e05c      	b.n	8003fec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d106      	bne.n	8003f46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f8a3 	bl	8005088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f46:	f002 f891 	bl	800606c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f4a:	f000 fe0d 	bl	8004b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f4e:	f002 f85d 	bl	800600c <vPortEnterCritical>
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f58:	b25b      	sxtb	r3, r3
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5e:	d103      	bne.n	8003f68 <xQueueGenericSend+0x16c>
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f74:	d103      	bne.n	8003f7e <xQueueGenericSend+0x182>
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f7e:	f002 f875 	bl	800606c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f82:	1d3a      	adds	r2, r7, #4
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 f892 	bl	80050b4 <xTaskCheckForTimeOut>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d124      	bne.n	8003fe0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f98:	f000 fb1e 	bl	80045d8 <prvIsQueueFull>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d018      	beq.n	8003fd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	3310      	adds	r3, #16
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 ffb8 	bl	8004f20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb2:	f000 faa9 	bl	8004508 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fb6:	f000 fde5 	bl	8004b84 <xTaskResumeAll>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f47f af7c 	bne.w	8003eba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <xQueueGenericSend+0x1f8>)
 8003fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	e772      	b.n	8003eba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fd6:	f000 fa97 	bl	8004508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fda:	f000 fdd3 	bl	8004b84 <xTaskResumeAll>
 8003fde:	e76c      	b.n	8003eba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fe2:	f000 fa91 	bl	8004508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fe6:	f000 fdcd 	bl	8004b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fea:	2300      	movs	r3, #0
		}
	}
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3738      	adds	r7, #56	; 0x38
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	e000ed04 	.word	0xe000ed04

08003ff8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08e      	sub	sp, #56	; 0x38
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <xQueueGenericSendFromISR+0x3c>
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <xQueueGenericSendFromISR+0x40>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <xQueueGenericSendFromISR+0x42>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	623b      	str	r3, [r7, #32]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d103      	bne.n	8004062 <xQueueGenericSendFromISR+0x6a>
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <xQueueGenericSendFromISR+0x6e>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueGenericSendFromISR+0x70>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61fb      	str	r3, [r7, #28]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004082:	f002 f885 	bl	8006190 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004086:	f3ef 8211 	mrs	r2, BASEPRI
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	61ba      	str	r2, [r7, #24]
 800409c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800409e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d302      	bcc.n	80040b4 <xQueueGenericSendFromISR+0xbc>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d12c      	bne.n	800410e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040c4:	f000 f990 	bl	80043e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d0:	d112      	bne.n	80040f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	3324      	adds	r3, #36	; 0x24
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 ff6e 	bl	8004fc0 <xTaskRemoveFromEventList>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00e      	beq.n	8004108 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e007      	b.n	8004108 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040fc:	3301      	adds	r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	b25a      	sxtb	r2, r3
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004108:	2301      	movs	r3, #1
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800410c:	e001      	b.n	8004112 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800410e:	2300      	movs	r3, #0
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800411c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004120:	4618      	mov	r0, r3
 8004122:	3738      	adds	r7, #56	; 0x38
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	; 0x30
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004134:	2300      	movs	r3, #0
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <xQueueReceive+0x30>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	623b      	str	r3, [r7, #32]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <xQueueReceive+0x3e>
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <xQueueReceive+0x42>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <xQueueReceive+0x44>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xQueueReceive+0x5e>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61fb      	str	r3, [r7, #28]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004186:	f001 f8e1 	bl	800534c <xTaskGetSchedulerState>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <xQueueReceive+0x6e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <xQueueReceive+0x72>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <xQueueReceive+0x74>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xQueueReceive+0x8e>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	61bb      	str	r3, [r7, #24]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80041b6:	f001 ff29 	bl	800600c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01f      	beq.n	8004206 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ca:	f000 f977 	bl	80044bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	1e5a      	subs	r2, r3, #1
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00f      	beq.n	80041fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	3310      	adds	r3, #16
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 feec 	bl	8004fc0 <xTaskRemoveFromEventList>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <xQueueReceive+0x1bc>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041fe:	f001 ff35 	bl	800606c <vPortExitCritical>
				return pdPASS;
 8004202:	2301      	movs	r3, #1
 8004204:	e069      	b.n	80042da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d103      	bne.n	8004214 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800420c:	f001 ff2e 	bl	800606c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004210:	2300      	movs	r3, #0
 8004212:	e062      	b.n	80042da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800421a:	f107 0310 	add.w	r3, r7, #16
 800421e:	4618      	mov	r0, r3
 8004220:	f000 ff32 	bl	8005088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004228:	f001 ff20 	bl	800606c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800422c:	f000 fc9c 	bl	8004b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004230:	f001 feec 	bl	800600c <vPortEnterCritical>
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004240:	d103      	bne.n	800424a <xQueueReceive+0x122>
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004250:	b25b      	sxtb	r3, r3
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004256:	d103      	bne.n	8004260 <xQueueReceive+0x138>
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004260:	f001 ff04 	bl	800606c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004264:	1d3a      	adds	r2, r7, #4
 8004266:	f107 0310 	add.w	r3, r7, #16
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f000 ff21 	bl	80050b4 <xTaskCheckForTimeOut>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d123      	bne.n	80042c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800427a:	f000 f997 	bl	80045ac <prvIsQueueEmpty>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d017      	beq.n	80042b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	3324      	adds	r3, #36	; 0x24
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fe47 	bl	8004f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004294:	f000 f938 	bl	8004508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004298:	f000 fc74 	bl	8004b84 <xTaskResumeAll>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d189      	bne.n	80041b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <xQueueReceive+0x1bc>)
 80042a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	e780      	b.n	80041b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b6:	f000 f927 	bl	8004508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ba:	f000 fc63 	bl	8004b84 <xTaskResumeAll>
 80042be:	e77a      	b.n	80041b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c2:	f000 f921 	bl	8004508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042c6:	f000 fc5d 	bl	8004b84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042cc:	f000 f96e 	bl	80045ac <prvIsQueueEmpty>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f43f af6f 	beq.w	80041b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3730      	adds	r7, #48	; 0x30
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	e000ed04 	.word	0xe000ed04

080042e8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	623b      	str	r3, [r7, #32]
}
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <xQueueReceiveFromISR+0x3a>
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <xQueueReceiveFromISR+0x3e>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <xQueueReceiveFromISR+0x40>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	61fb      	str	r3, [r7, #28]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004342:	f001 ff25 	bl	8006190 <vPortValidateInterruptPriority>
	__asm volatile
 8004346:	f3ef 8211 	mrs	r2, BASEPRI
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	61ba      	str	r2, [r7, #24]
 800435c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800435e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02f      	beq.n	80043ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800437c:	f000 f89e 	bl	80044bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	1e5a      	subs	r2, r3, #1
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004390:	d112      	bne.n	80043b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	3310      	adds	r3, #16
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fe0e 	bl	8004fc0 <xTaskRemoveFromEventList>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00e      	beq.n	80043c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e007      	b.n	80043c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80043b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043bc:	3301      	adds	r3, #1
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	b25a      	sxtb	r2, r3
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80043c8:	2301      	movs	r3, #1
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
 80043cc:	e001      	b.n	80043d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f383 8811 	msr	BASEPRI, r3
}
 80043dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3738      	adds	r7, #56	; 0x38
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10d      	bne.n	8004422 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d14d      	bne.n	80044aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 ffb8 	bl	8005388 <xTaskPriorityDisinherit>
 8004418:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	e043      	b.n	80044aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d119      	bne.n	800445c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6898      	ldr	r0, [r3, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	461a      	mov	r2, r3
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	f002 f8e6 	bl	8006604 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	441a      	add	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	429a      	cmp	r2, r3
 8004450:	d32b      	bcc.n	80044aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	609a      	str	r2, [r3, #8]
 800445a:	e026      	b.n	80044aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68d8      	ldr	r0, [r3, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	461a      	mov	r2, r3
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	f002 f8cc 	bl	8006604 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	425b      	negs	r3, r3
 8004476:	441a      	add	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d207      	bcs.n	8004498 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	425b      	negs	r3, r3
 8004492:	441a      	add	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d105      	bne.n	80044aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044b2:	697b      	ldr	r3, [r7, #20]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d018      	beq.n	8004500 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	441a      	add	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d303      	bcc.n	80044f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68d9      	ldr	r1, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	461a      	mov	r2, r3
 80044fa:	6838      	ldr	r0, [r7, #0]
 80044fc:	f002 f882 	bl	8006604 <memcpy>
	}
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004510:	f001 fd7c 	bl	800600c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800451c:	e011      	b.n	8004542 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	d012      	beq.n	800454c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3324      	adds	r3, #36	; 0x24
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fd48 	bl	8004fc0 <xTaskRemoveFromEventList>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004536:	f000 fe1f 	bl	8005178 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	3b01      	subs	r3, #1
 800453e:	b2db      	uxtb	r3, r3
 8004540:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	dce9      	bgt.n	800451e <prvUnlockQueue+0x16>
 800454a:	e000      	b.n	800454e <prvUnlockQueue+0x46>
					break;
 800454c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	22ff      	movs	r2, #255	; 0xff
 8004552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004556:	f001 fd89 	bl	800606c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800455a:	f001 fd57 	bl	800600c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004564:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004566:	e011      	b.n	800458c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d012      	beq.n	8004596 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3310      	adds	r3, #16
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fd23 	bl	8004fc0 <xTaskRemoveFromEventList>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004580:	f000 fdfa 	bl	8005178 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004584:	7bbb      	ldrb	r3, [r7, #14]
 8004586:	3b01      	subs	r3, #1
 8004588:	b2db      	uxtb	r3, r3
 800458a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800458c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004590:	2b00      	cmp	r3, #0
 8004592:	dce9      	bgt.n	8004568 <prvUnlockQueue+0x60>
 8004594:	e000      	b.n	8004598 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004596:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	22ff      	movs	r2, #255	; 0xff
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045a0:	f001 fd64 	bl	800606c <vPortExitCritical>
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045b4:	f001 fd2a 	bl	800600c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e001      	b.n	80045ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ca:	f001 fd4f 	bl	800606c <vPortExitCritical>

	return xReturn;
 80045ce:	68fb      	ldr	r3, [r7, #12]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045e0:	f001 fd14 	bl	800600c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d102      	bne.n	80045f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e001      	b.n	80045fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045fa:	f001 fd37 	bl	800606c <vPortExitCritical>

	return xReturn;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e014      	b.n	8004642 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004618:	4a0e      	ldr	r2, [pc, #56]	; (8004654 <vQueueAddToRegistry+0x4c>)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004624:	490b      	ldr	r1, [pc, #44]	; (8004654 <vQueueAddToRegistry+0x4c>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800462e:	4a09      	ldr	r2, [pc, #36]	; (8004654 <vQueueAddToRegistry+0x4c>)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800463a:	e006      	b.n	800464a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b07      	cmp	r3, #7
 8004646:	d9e7      	bls.n	8004618 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	200009b4 	.word	0x200009b4

08004658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004668:	f001 fcd0 	bl	800600c <vPortEnterCritical>
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004672:	b25b      	sxtb	r3, r3
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004678:	d103      	bne.n	8004682 <vQueueWaitForMessageRestricted+0x2a>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004688:	b25b      	sxtb	r3, r3
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800468e:	d103      	bne.n	8004698 <vQueueWaitForMessageRestricted+0x40>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004698:	f001 fce8 	bl	800606c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	3324      	adds	r3, #36	; 0x24
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fc5b 	bl	8004f68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7ff ff28 	bl	8004508 <prvUnlockQueue>
	}
 80046b8:	bf00      	nop
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af04      	add	r7, sp, #16
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	623b      	str	r3, [r7, #32]
}
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <xTaskCreateStatic+0x46>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	61fb      	str	r3, [r7, #28]
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004706:	23cc      	movs	r3, #204	; 0xcc
 8004708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2bcc      	cmp	r3, #204	; 0xcc
 800470e:	d00a      	beq.n	8004726 <xTaskCreateStatic+0x66>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	61bb      	str	r3, [r7, #24]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01e      	beq.n	800476a <xTaskCreateStatic+0xaa>
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01b      	beq.n	800476a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800473a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	2202      	movs	r2, #2
 8004740:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004744:	2300      	movs	r3, #0
 8004746:	9303      	str	r3, [sp, #12]
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f851 	bl	8004804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004764:	f000 f8ec 	bl	8004940 <prvAddNewTaskToReadyList>
 8004768:	e001      	b.n	800476e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800476e:	697b      	ldr	r3, [r7, #20]
	}
 8004770:	4618      	mov	r0, r3
 8004772:	3728      	adds	r7, #40	; 0x28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	; 0x30
 800477c:	af04      	add	r7, sp, #16
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4618      	mov	r0, r3
 800478e:	f001 fd3d 	bl	800620c <pvPortMalloc>
 8004792:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800479a:	20cc      	movs	r0, #204	; 0xcc
 800479c:	f001 fd36 	bl	800620c <pvPortMalloc>
 80047a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
 80047ae:	e005      	b.n	80047bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047b0:	6978      	ldr	r0, [r7, #20]
 80047b2:	f001 fdef 	bl	8006394 <vPortFree>
 80047b6:	e001      	b.n	80047bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d017      	beq.n	80047f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9303      	str	r3, [sp, #12]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	9302      	str	r3, [sp, #8]
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f80f 	bl	8004804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047e6:	69f8      	ldr	r0, [r7, #28]
 80047e8:	f000 f8aa 	bl	8004940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	e002      	b.n	80047f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047f8:	69bb      	ldr	r3, [r7, #24]
	}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	461a      	mov	r2, r3
 800481c:	21a5      	movs	r1, #165	; 0xa5
 800481e:	f001 feff 	bl	8006620 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800482c:	3b01      	subs	r3, #1
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f023 0307 	bic.w	r3, r3, #7
 800483a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	617b      	str	r3, [r7, #20]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e012      	b.n	8004888 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	7819      	ldrb	r1, [r3, #0]
 800486a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	3334      	adds	r3, #52	; 0x34
 8004872:	460a      	mov	r2, r1
 8004874:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	4413      	add	r3, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d006      	beq.n	8004890 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3301      	adds	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2b1f      	cmp	r3, #31
 800488c:	d9e9      	bls.n	8004862 <prvInitialiseNewTask+0x5e>
 800488e:	e000      	b.n	8004892 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004890:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	2b37      	cmp	r3, #55	; 0x37
 800489e:	d901      	bls.n	80048a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048a0:	2337      	movs	r3, #55	; 0x37
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ae:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	2200      	movs	r2, #0
 80048b4:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff f8cd 	bl	8003a5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	3318      	adds	r3, #24
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f8c8 	bl	8003a5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	3364      	adds	r3, #100	; 0x64
 80048f4:	2260      	movs	r2, #96	; 0x60
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fe91 	bl	8006620 <memset>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	4a0c      	ldr	r2, [pc, #48]	; (8004934 <prvInitialiseNewTask+0x130>)
 8004902:	669a      	str	r2, [r3, #104]	; 0x68
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <prvInitialiseNewTask+0x134>)
 8004908:	66da      	str	r2, [r3, #108]	; 0x6c
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	4a0b      	ldr	r2, [pc, #44]	; (800493c <prvInitialiseNewTask+0x138>)
 800490e:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	69b8      	ldr	r0, [r7, #24]
 8004916:	f001 fa87 	bl	8005e28 <pxPortInitialiseStack>
 800491a:	4602      	mov	r2, r0
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800492a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800492c:	bf00      	nop
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	08006910 	.word	0x08006910
 8004938:	08006930 	.word	0x08006930
 800493c:	080068f0 	.word	0x080068f0

08004940 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004948:	f001 fb60 	bl	800600c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800494c:	4b2d      	ldr	r3, [pc, #180]	; (8004a04 <prvAddNewTaskToReadyList+0xc4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <prvAddNewTaskToReadyList+0xc4>)
 8004954:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004956:	4b2c      	ldr	r3, [pc, #176]	; (8004a08 <prvAddNewTaskToReadyList+0xc8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800495e:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <prvAddNewTaskToReadyList+0xc8>)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004964:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <prvAddNewTaskToReadyList+0xc4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d110      	bne.n	800498e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800496c:	f000 fc28 	bl	80051c0 <prvInitialiseTaskLists>
 8004970:	e00d      	b.n	800498e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <prvAddNewTaskToReadyList+0xcc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800497a:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <prvAddNewTaskToReadyList+0xc8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	429a      	cmp	r2, r3
 8004986:	d802      	bhi.n	800498e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004988:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <prvAddNewTaskToReadyList+0xc8>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800498e:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <prvAddNewTaskToReadyList+0xd0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3301      	adds	r3, #1
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <prvAddNewTaskToReadyList+0xd0>)
 8004996:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <prvAddNewTaskToReadyList+0xd0>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <prvAddNewTaskToReadyList+0xd4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d903      	bls.n	80049b4 <prvAddNewTaskToReadyList+0x74>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <prvAddNewTaskToReadyList+0xd4>)
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <prvAddNewTaskToReadyList+0xd8>)
 80049c2:	441a      	add	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7ff f851 	bl	8003a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049d0:	f001 fb4c 	bl	800606c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <prvAddNewTaskToReadyList+0xcc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00e      	beq.n	80049fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <prvAddNewTaskToReadyList+0xc8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d207      	bcs.n	80049fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <prvAddNewTaskToReadyList+0xdc>)
 80049ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000ec8 	.word	0x20000ec8
 8004a08:	200009f4 	.word	0x200009f4
 8004a0c:	20000ed4 	.word	0x20000ed4
 8004a10:	20000ee4 	.word	0x20000ee4
 8004a14:	20000ed0 	.word	0x20000ed0
 8004a18:	200009f8 	.word	0x200009f8
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d017      	beq.n	8004a62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a32:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <vTaskDelay+0x60>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <vTaskDelay+0x30>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	60bb      	str	r3, [r7, #8]
}
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a50:	f000 f88a 	bl	8004b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a54:	2100      	movs	r1, #0
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fe80 	bl	800575c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a5c:	f000 f892 	bl	8004b84 <xTaskResumeAll>
 8004a60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d107      	bne.n	8004a78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <vTaskDelay+0x64>)
 8004a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000ef0 	.word	0x20000ef0
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a96:	463a      	mov	r2, r7
 8004a98:	1d39      	adds	r1, r7, #4
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe ff8a 	bl	80039b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	9202      	str	r2, [sp, #8]
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	4924      	ldr	r1, [pc, #144]	; (8004b48 <vTaskStartScheduler+0xc0>)
 8004ab8:	4824      	ldr	r0, [pc, #144]	; (8004b4c <vTaskStartScheduler+0xc4>)
 8004aba:	f7ff fe01 	bl	80046c0 <xTaskCreateStatic>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4a23      	ldr	r2, [pc, #140]	; (8004b50 <vTaskStartScheduler+0xc8>)
 8004ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ac4:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <vTaskStartScheduler+0xc8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e001      	b.n	8004ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d102      	bne.n	8004ae2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004adc:	f000 fe92 	bl	8005804 <xTimerCreateTimerTask>
 8004ae0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d11b      	bne.n	8004b20 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	613b      	str	r3, [r7, #16]
}
 8004afa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <vTaskStartScheduler+0xcc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3364      	adds	r3, #100	; 0x64
 8004b02:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <vTaskStartScheduler+0xd0>)
 8004b04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <vTaskStartScheduler+0xd4>)
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b0e:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <vTaskStartScheduler+0xd8>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b14:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <vTaskStartScheduler+0xdc>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b1a:	f001 fa05 	bl	8005f28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b1e:	e00e      	b.n	8004b3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b26:	d10a      	bne.n	8004b3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60fb      	str	r3, [r7, #12]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <vTaskStartScheduler+0xb4>
}
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	08006860 	.word	0x08006860
 8004b4c:	08005191 	.word	0x08005191
 8004b50:	20000eec 	.word	0x20000eec
 8004b54:	200009f4 	.word	0x200009f4
 8004b58:	20000010 	.word	0x20000010
 8004b5c:	20000ee8 	.word	0x20000ee8
 8004b60:	20000ed4 	.word	0x20000ed4
 8004b64:	20000ecc 	.word	0x20000ecc

08004b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <vTaskSuspendAll+0x18>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <vTaskSuspendAll+0x18>)
 8004b74:	6013      	str	r3, [r2, #0]
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000ef0 	.word	0x20000ef0

08004b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b92:	4b42      	ldr	r3, [pc, #264]	; (8004c9c <xTaskResumeAll+0x118>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	603b      	str	r3, [r7, #0]
}
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bb0:	f001 fa2c 	bl	800600c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <xTaskResumeAll+0x118>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	4a38      	ldr	r2, [pc, #224]	; (8004c9c <xTaskResumeAll+0x118>)
 8004bbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <xTaskResumeAll+0x118>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d162      	bne.n	8004c8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bc6:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <xTaskResumeAll+0x11c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d05e      	beq.n	8004c8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bce:	e02f      	b.n	8004c30 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <xTaskResumeAll+0x120>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe ffa3 	bl	8003b28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe ff9e 	bl	8003b28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	4b2d      	ldr	r3, [pc, #180]	; (8004ca8 <xTaskResumeAll+0x124>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d903      	bls.n	8004c00 <xTaskResumeAll+0x7c>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <xTaskResumeAll+0x124>)
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4a27      	ldr	r2, [pc, #156]	; (8004cac <xTaskResumeAll+0x128>)
 8004c0e:	441a      	add	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7fe ff2b 	bl	8003a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4b23      	ldr	r3, [pc, #140]	; (8004cb0 <xTaskResumeAll+0x12c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c2a:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <xTaskResumeAll+0x130>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <xTaskResumeAll+0x120>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1cb      	bne.n	8004bd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c3e:	f000 fb61 	bl	8005304 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c42:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <xTaskResumeAll+0x134>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d010      	beq.n	8004c70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c4e:	f000 f845 	bl	8004cdc <xTaskIncrementTick>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c58:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <xTaskResumeAll+0x130>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f1      	bne.n	8004c4e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <xTaskResumeAll+0x134>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c70:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <xTaskResumeAll+0x130>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <xTaskResumeAll+0x138>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c8c:	f001 f9ee 	bl	800606c <vPortExitCritical>

	return xAlreadyYielded;
 8004c90:	68bb      	ldr	r3, [r7, #8]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000ef0 	.word	0x20000ef0
 8004ca0:	20000ec8 	.word	0x20000ec8
 8004ca4:	20000e88 	.word	0x20000e88
 8004ca8:	20000ed0 	.word	0x20000ed0
 8004cac:	200009f8 	.word	0x200009f8
 8004cb0:	200009f4 	.word	0x200009f4
 8004cb4:	20000edc 	.word	0x20000edc
 8004cb8:	20000ed8 	.word	0x20000ed8
 8004cbc:	e000ed04 	.word	0xe000ed04

08004cc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cc6:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <xTaskGetTickCount+0x18>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ccc:	687b      	ldr	r3, [r7, #4]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	20000ecc 	.word	0x20000ecc

08004cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce6:	4b51      	ldr	r3, [pc, #324]	; (8004e2c <xTaskIncrementTick+0x150>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 808e 	bne.w	8004e0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cf0:	4b4f      	ldr	r3, [pc, #316]	; (8004e30 <xTaskIncrementTick+0x154>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cf8:	4a4d      	ldr	r2, [pc, #308]	; (8004e30 <xTaskIncrementTick+0x154>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d120      	bne.n	8004d46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d04:	4b4b      	ldr	r3, [pc, #300]	; (8004e34 <xTaskIncrementTick+0x158>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	603b      	str	r3, [r7, #0]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <xTaskIncrementTick+0x46>
 8004d24:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <xTaskIncrementTick+0x158>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <xTaskIncrementTick+0x15c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a41      	ldr	r2, [pc, #260]	; (8004e34 <xTaskIncrementTick+0x158>)
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4a41      	ldr	r2, [pc, #260]	; (8004e38 <xTaskIncrementTick+0x15c>)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <xTaskIncrementTick+0x160>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	4a3f      	ldr	r2, [pc, #252]	; (8004e3c <xTaskIncrementTick+0x160>)
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	f000 fadf 	bl	8005304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d46:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <xTaskIncrementTick+0x164>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d34e      	bcc.n	8004dee <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d50:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <xTaskIncrementTick+0x158>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <xTaskIncrementTick+0x82>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <xTaskIncrementTick+0x84>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d64:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <xTaskIncrementTick+0x164>)
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d6a:	601a      	str	r2, [r3, #0]
					break;
 8004d6c:	e03f      	b.n	8004dee <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d6e:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <xTaskIncrementTick+0x158>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d203      	bcs.n	8004d8e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d86:	4a2e      	ldr	r2, [pc, #184]	; (8004e40 <xTaskIncrementTick+0x164>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6013      	str	r3, [r2, #0]
						break;
 8004d8c:	e02f      	b.n	8004dee <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fec8 	bl	8003b28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	3318      	adds	r3, #24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe febf 	bl	8003b28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dae:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <xTaskIncrementTick+0x168>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d903      	bls.n	8004dbe <xTaskIncrementTick+0xe2>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <xTaskIncrementTick+0x168>)
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <xTaskIncrementTick+0x16c>)
 8004dcc:	441a      	add	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7fe fe4c 	bl	8003a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <xTaskIncrementTick+0x170>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d3b3      	bcc.n	8004d50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004de8:	2301      	movs	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dec:	e7b0      	b.n	8004d50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dee:	4b17      	ldr	r3, [pc, #92]	; (8004e4c <xTaskIncrementTick+0x170>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4914      	ldr	r1, [pc, #80]	; (8004e48 <xTaskIncrementTick+0x16c>)
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d907      	bls.n	8004e16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e06:	2301      	movs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e004      	b.n	8004e16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e0c:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <xTaskIncrementTick+0x174>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	4a0f      	ldr	r2, [pc, #60]	; (8004e50 <xTaskIncrementTick+0x174>)
 8004e14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e16:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <xTaskIncrementTick+0x178>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e22:	697b      	ldr	r3, [r7, #20]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000ef0 	.word	0x20000ef0
 8004e30:	20000ecc 	.word	0x20000ecc
 8004e34:	20000e80 	.word	0x20000e80
 8004e38:	20000e84 	.word	0x20000e84
 8004e3c:	20000ee0 	.word	0x20000ee0
 8004e40:	20000ee8 	.word	0x20000ee8
 8004e44:	20000ed0 	.word	0x20000ed0
 8004e48:	200009f8 	.word	0x200009f8
 8004e4c:	200009f4 	.word	0x200009f4
 8004e50:	20000ed8 	.word	0x20000ed8
 8004e54:	20000edc 	.word	0x20000edc

08004e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e5e:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <vTaskSwitchContext+0xb0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e66:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <vTaskSwitchContext+0xb4>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e6c:	e046      	b.n	8004efc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004e6e:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <vTaskSwitchContext+0xb4>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e74:	4b26      	ldr	r3, [pc, #152]	; (8004f10 <vTaskSwitchContext+0xb8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e010      	b.n	8004e9e <vTaskSwitchContext+0x46>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <vTaskSwitchContext+0x40>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	607b      	str	r3, [r7, #4]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <vTaskSwitchContext+0x3e>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	491d      	ldr	r1, [pc, #116]	; (8004f14 <vTaskSwitchContext+0xbc>)
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0e4      	beq.n	8004e7c <vTaskSwitchContext+0x24>
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <vTaskSwitchContext+0xbc>)
 8004ebe:	4413      	add	r3, r2
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	605a      	str	r2, [r3, #4]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d104      	bne.n	8004ee2 <vTaskSwitchContext+0x8a>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4a0b      	ldr	r2, [pc, #44]	; (8004f18 <vTaskSwitchContext+0xc0>)
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <vTaskSwitchContext+0xb8>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <vTaskSwitchContext+0xc0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3364      	adds	r3, #100	; 0x64
 8004ef8:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <vTaskSwitchContext+0xc4>)
 8004efa:	6013      	str	r3, [r2, #0]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000ef0 	.word	0x20000ef0
 8004f0c:	20000edc 	.word	0x20000edc
 8004f10:	20000ed0 	.word	0x20000ed0
 8004f14:	200009f8 	.word	0x200009f8
 8004f18:	200009f4 	.word	0x200009f4
 8004f1c:	20000010 	.word	0x20000010

08004f20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60fb      	str	r3, [r7, #12]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <vTaskPlaceOnEventList+0x44>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3318      	adds	r3, #24
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fe fdb2 	bl	8003ab8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f54:	2101      	movs	r1, #1
 8004f56:	6838      	ldr	r0, [r7, #0]
 8004f58:	f000 fc00 	bl	800575c <prvAddCurrentTaskToDelayedList>
}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	200009f4 	.word	0x200009f4

08004f68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	617b      	str	r3, [r7, #20]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <vTaskPlaceOnEventListRestricted+0x54>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3318      	adds	r3, #24
 8004f96:	4619      	mov	r1, r3
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7fe fd6a 	bl	8003a72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	f000 fbd5 	bl	800575c <prvAddCurrentTaskToDelayedList>
	}
 8004fb2:	bf00      	nop
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	200009f4 	.word	0x200009f4

08004fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	60fb      	str	r3, [r7, #12]
}
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe fd99 	bl	8003b28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff6:	4b1e      	ldr	r3, [pc, #120]	; (8005070 <xTaskRemoveFromEventList+0xb0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11d      	bne.n	800503a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3304      	adds	r3, #4
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe fd90 	bl	8003b28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <xTaskRemoveFromEventList+0xb4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <xTaskRemoveFromEventList+0x5c>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4a16      	ldr	r2, [pc, #88]	; (8005074 <xTaskRemoveFromEventList+0xb4>)
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <xTaskRemoveFromEventList+0xb8>)
 800502a:	441a      	add	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fe fd1d 	bl	8003a72 <vListInsertEnd>
 8005038:	e005      	b.n	8005046 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3318      	adds	r3, #24
 800503e:	4619      	mov	r1, r3
 8005040:	480e      	ldr	r0, [pc, #56]	; (800507c <xTaskRemoveFromEventList+0xbc>)
 8005042:	f7fe fd16 	bl	8003a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <xTaskRemoveFromEventList+0xc0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	429a      	cmp	r2, r3
 8005052:	d905      	bls.n	8005060 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <xTaskRemoveFromEventList+0xc4>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e001      	b.n	8005064 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005064:	697b      	ldr	r3, [r7, #20]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000ef0 	.word	0x20000ef0
 8005074:	20000ed0 	.word	0x20000ed0
 8005078:	200009f8 	.word	0x200009f8
 800507c:	20000e88 	.word	0x20000e88
 8005080:	200009f4 	.word	0x200009f4
 8005084:	20000edc 	.word	0x20000edc

08005088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <vTaskInternalSetTimeOutState+0x24>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <vTaskInternalSetTimeOutState+0x28>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	605a      	str	r2, [r3, #4]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000ee0 	.word	0x20000ee0
 80050b0:	20000ecc 	.word	0x20000ecc

080050b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	613b      	str	r3, [r7, #16]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60fb      	str	r3, [r7, #12]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050f6:	f000 ff89 	bl	800600c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <xTaskCheckForTimeOut+0xbc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005112:	d102      	bne.n	800511a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	e023      	b.n	8005162 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <xTaskCheckForTimeOut+0xc0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d007      	beq.n	8005136 <xTaskCheckForTimeOut+0x82>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e015      	b.n	8005162 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	429a      	cmp	r2, r3
 800513e:	d20b      	bcs.n	8005158 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	1ad2      	subs	r2, r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ff9b 	bl	8005088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e004      	b.n	8005162 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800515e:	2301      	movs	r3, #1
 8005160:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005162:	f000 ff83 	bl	800606c <vPortExitCritical>

	return xReturn;
 8005166:	69fb      	ldr	r3, [r7, #28]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000ecc 	.word	0x20000ecc
 8005174:	20000ee0 	.word	0x20000ee0

08005178 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <vTaskMissedYield+0x14>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000edc 	.word	0x20000edc

08005190 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005198:	f000 f852 	bl	8005240 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <prvIdleTask+0x28>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d9f9      	bls.n	8005198 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <prvIdleTask+0x2c>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051b4:	e7f0      	b.n	8005198 <prvIdleTask+0x8>
 80051b6:	bf00      	nop
 80051b8:	200009f8 	.word	0x200009f8
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051c6:	2300      	movs	r3, #0
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	e00c      	b.n	80051e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4a12      	ldr	r2, [pc, #72]	; (8005220 <prvInitialiseTaskLists+0x60>)
 80051d8:	4413      	add	r3, r2
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fc1e 	bl	8003a1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3301      	adds	r3, #1
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b37      	cmp	r3, #55	; 0x37
 80051ea:	d9ef      	bls.n	80051cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051ec:	480d      	ldr	r0, [pc, #52]	; (8005224 <prvInitialiseTaskLists+0x64>)
 80051ee:	f7fe fc15 	bl	8003a1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051f2:	480d      	ldr	r0, [pc, #52]	; (8005228 <prvInitialiseTaskLists+0x68>)
 80051f4:	f7fe fc12 	bl	8003a1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051f8:	480c      	ldr	r0, [pc, #48]	; (800522c <prvInitialiseTaskLists+0x6c>)
 80051fa:	f7fe fc0f 	bl	8003a1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051fe:	480c      	ldr	r0, [pc, #48]	; (8005230 <prvInitialiseTaskLists+0x70>)
 8005200:	f7fe fc0c 	bl	8003a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005204:	480b      	ldr	r0, [pc, #44]	; (8005234 <prvInitialiseTaskLists+0x74>)
 8005206:	f7fe fc09 	bl	8003a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800520a:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <prvInitialiseTaskLists+0x78>)
 800520c:	4a05      	ldr	r2, [pc, #20]	; (8005224 <prvInitialiseTaskLists+0x64>)
 800520e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <prvInitialiseTaskLists+0x7c>)
 8005212:	4a05      	ldr	r2, [pc, #20]	; (8005228 <prvInitialiseTaskLists+0x68>)
 8005214:	601a      	str	r2, [r3, #0]
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	200009f8 	.word	0x200009f8
 8005224:	20000e58 	.word	0x20000e58
 8005228:	20000e6c 	.word	0x20000e6c
 800522c:	20000e88 	.word	0x20000e88
 8005230:	20000e9c 	.word	0x20000e9c
 8005234:	20000eb4 	.word	0x20000eb4
 8005238:	20000e80 	.word	0x20000e80
 800523c:	20000e84 	.word	0x20000e84

08005240 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005246:	e019      	b.n	800527c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005248:	f000 fee0 	bl	800600c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800524c:	4b10      	ldr	r3, [pc, #64]	; (8005290 <prvCheckTasksWaitingTermination+0x50>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fc65 	bl	8003b28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <prvCheckTasksWaitingTermination+0x54>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3b01      	subs	r3, #1
 8005264:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <prvCheckTasksWaitingTermination+0x54>)
 8005266:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005268:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <prvCheckTasksWaitingTermination+0x58>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3b01      	subs	r3, #1
 800526e:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <prvCheckTasksWaitingTermination+0x58>)
 8005270:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005272:	f000 fefb 	bl	800606c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f810 	bl	800529c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <prvCheckTasksWaitingTermination+0x58>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e1      	bne.n	8005248 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000e9c 	.word	0x20000e9c
 8005294:	20000ec8 	.word	0x20000ec8
 8005298:	20000eb0 	.word	0x20000eb0

0800529c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3364      	adds	r3, #100	; 0x64
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 f9cf 	bl	800664c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 f869 	bl	8006394 <vPortFree>
				vPortFree( pxTCB );
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 f866 	bl	8006394 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052c8:	e018      	b.n	80052fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d103      	bne.n	80052dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f001 f85d 	bl	8006394 <vPortFree>
	}
 80052da:	e00f      	b.n	80052fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d00a      	beq.n	80052fc <prvDeleteTCB+0x60>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <prvDeleteTCB+0x5e>
	}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800530a:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <prvResetNextTaskUnblockTime+0x40>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <prvResetNextTaskUnblockTime+0x14>
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <prvResetNextTaskUnblockTime+0x16>
 8005318:	2300      	movs	r3, #0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <prvResetNextTaskUnblockTime+0x44>)
 8005320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005324:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005326:	e008      	b.n	800533a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <prvResetNextTaskUnblockTime+0x40>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4a04      	ldr	r2, [pc, #16]	; (8005348 <prvResetNextTaskUnblockTime+0x44>)
 8005338:	6013      	str	r3, [r2, #0]
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	20000e80 	.word	0x20000e80
 8005348:	20000ee8 	.word	0x20000ee8

0800534c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <xTaskGetSchedulerState+0x34>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800535a:	2301      	movs	r3, #1
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	e008      	b.n	8005372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005360:	4b08      	ldr	r3, [pc, #32]	; (8005384 <xTaskGetSchedulerState+0x38>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005368:	2302      	movs	r3, #2
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e001      	b.n	8005372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005372:	687b      	ldr	r3, [r7, #4]
	}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000ed4 	.word	0x20000ed4
 8005384:	20000ef0 	.word	0x20000ef0

08005388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d056      	beq.n	800544c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <xTaskPriorityDisinherit+0xd0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d00a      	beq.n	80053be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	60fb      	str	r3, [r7, #12]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60bb      	str	r3, [r7, #8]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e0:	1e5a      	subs	r2, r3, #1
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d02c      	beq.n	800544c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d128      	bne.n	800544c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fb92 	bl	8003b28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <xTaskPriorityDisinherit+0xd4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d903      	bls.n	800542c <xTaskPriorityDisinherit+0xa4>
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	4a0c      	ldr	r2, [pc, #48]	; (800545c <xTaskPriorityDisinherit+0xd4>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4a09      	ldr	r2, [pc, #36]	; (8005460 <xTaskPriorityDisinherit+0xd8>)
 800543a:	441a      	add	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe fb15 	bl	8003a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800544c:	697b      	ldr	r3, [r7, #20]
	}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	200009f4 	.word	0x200009f4
 800545c:	20000ed0 	.word	0x20000ed0
 8005460:	200009f8 	.word	0x200009f8

08005464 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005474:	2301      	movs	r3, #1
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <xTaskGenericNotify+0x30>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	61bb      	str	r3, [r7, #24]
}
 8005490:	bf00      	nop
 8005492:	e7fe      	b.n	8005492 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005498:	f000 fdb8 	bl	800600c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80054b2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d82d      	bhi.n	800551e <xTaskGenericNotify+0xba>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <xTaskGenericNotify+0x64>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	0800551f 	.word	0x0800551f
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	080054ff 	.word	0x080054ff
 80054d8:	08005509 	.word	0x08005509
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 80054ec:	e017      	b.n	800551e <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 80054fc:	e00f      	b.n	800551e <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8005506:	e00a      	b.n	800551e <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005508:	7ffb      	ldrb	r3, [r7, #31]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d004      	beq.n	8005518 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005516:	e001      	b.n	800551c <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8005518:	2300      	movs	r3, #0
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800551c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800551e:	7ffb      	ldrb	r3, [r7, #31]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d13a      	bne.n	800559a <xTaskGenericNotify+0x136>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	3304      	adds	r3, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe fafd 	bl	8003b28 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005532:	4b1d      	ldr	r3, [pc, #116]	; (80055a8 <xTaskGenericNotify+0x144>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d903      	bls.n	8005542 <xTaskGenericNotify+0xde>
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <xTaskGenericNotify+0x144>)
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4a17      	ldr	r2, [pc, #92]	; (80055ac <xTaskGenericNotify+0x148>)
 8005550:	441a      	add	r2, r3
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	3304      	adds	r3, #4
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f7fe fa8a 	bl	8003a72 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <xTaskGenericNotify+0x118>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	617b      	str	r3, [r7, #20]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xTaskGenericNotify+0x116>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <xTaskGenericNotify+0x14c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	429a      	cmp	r2, r3
 8005588:	d907      	bls.n	800559a <xTaskGenericNotify+0x136>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <xTaskGenericNotify+0x150>)
 800558c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800559a:	f000 fd67 	bl	800606c <vPortExitCritical>

		return xReturn;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3728      	adds	r7, #40	; 0x28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000ed0 	.word	0x20000ed0
 80055ac:	200009f8 	.word	0x200009f8
 80055b0:	200009f4 	.word	0x200009f4
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08e      	sub	sp, #56	; 0x38
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80055c8:	2301      	movs	r3, #1
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055e8:	f000 fdd2 	bl	8006190 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80055f0:	f3ef 8211 	mrs	r2, BASEPRI
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	623a      	str	r2, [r7, #32]
 8005606:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005608:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2202      	movs	r2, #2
 800562a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d82f      	bhi.n	8005694 <xTaskGenericNotifyFromISR+0xdc>
 8005634:	a201      	add	r2, pc, #4	; (adr r2, 800563c <xTaskGenericNotifyFromISR+0x84>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	08005695 	.word	0x08005695
 8005640:	08005651 	.word	0x08005651
 8005644:	08005663 	.word	0x08005663
 8005648:	08005673 	.word	0x08005673
 800564c:	0800567d 	.word	0x0800567d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	431a      	orrs	r2, r3
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8005660:	e018      	b.n	8005694 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8005670:	e010      	b.n	8005694 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800567a:	e00b      	b.n	8005694 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800567c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005680:	2b02      	cmp	r3, #2
 8005682:	d004      	beq.n	800568e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800568c:	e001      	b.n	8005692 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800568e:	2300      	movs	r3, #0
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005692:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005698:	2b01      	cmp	r3, #1
 800569a:	d147      	bne.n	800572c <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	61bb      	str	r3, [r7, #24]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ba:	4b22      	ldr	r3, [pc, #136]	; (8005744 <xTaskGenericNotifyFromISR+0x18c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11d      	bne.n	80056fe <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	3304      	adds	r3, #4
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fa2e 	bl	8003b28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <xTaskGenericNotifyFromISR+0x190>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d903      	bls.n	80056e0 <xTaskGenericNotifyFromISR+0x128>
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <xTaskGenericNotifyFromISR+0x190>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a17      	ldr	r2, [pc, #92]	; (800574c <xTaskGenericNotifyFromISR+0x194>)
 80056ee:	441a      	add	r2, r3
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7fe f9bb 	bl	8003a72 <vListInsertEnd>
 80056fc:	e005      	b.n	800570a <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	3318      	adds	r3, #24
 8005702:	4619      	mov	r1, r3
 8005704:	4812      	ldr	r0, [pc, #72]	; (8005750 <xTaskGenericNotifyFromISR+0x198>)
 8005706:	f7fe f9b4 	bl	8003a72 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <xTaskGenericNotifyFromISR+0x19c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	429a      	cmp	r2, r3
 8005716:	d909      	bls.n	800572c <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800571e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e002      	b.n	800572c <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <xTaskGenericNotifyFromISR+0x1a0>)
 8005728:	2201      	movs	r2, #1
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f383 8811 	msr	BASEPRI, r3
}
 8005736:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800573a:	4618      	mov	r0, r3
 800573c:	3738      	adds	r7, #56	; 0x38
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000ef0 	.word	0x20000ef0
 8005748:	20000ed0 	.word	0x20000ed0
 800574c:	200009f8 	.word	0x200009f8
 8005750:	20000e88 	.word	0x20000e88
 8005754:	200009f4 	.word	0x200009f4
 8005758:	20000edc 	.word	0x20000edc

0800575c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005766:	4b21      	ldr	r3, [pc, #132]	; (80057ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576c:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe f9d8 	bl	8003b28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800577e:	d10a      	bne.n	8005796 <prvAddCurrentTaskToDelayedList+0x3a>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005786:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4819      	ldr	r0, [pc, #100]	; (80057f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005790:	f7fe f96f 	bl	8003a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005794:	e026      	b.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4413      	add	r3, r2
 800579c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800579e:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d209      	bcs.n	80057c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ae:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7fe f97c 	bl	8003ab8 <vListInsert>
}
 80057c0:	e010      	b.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe f972 	bl	8003ab8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d202      	bcs.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000ecc 	.word	0x20000ecc
 80057f0:	200009f4 	.word	0x200009f4
 80057f4:	20000eb4 	.word	0x20000eb4
 80057f8:	20000e84 	.word	0x20000e84
 80057fc:	20000e80 	.word	0x20000e80
 8005800:	20000ee8 	.word	0x20000ee8

08005804 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	; 0x28
 8005808:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800580e:	f000 facb 	bl	8005da8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <xTimerCreateTimerTask+0x80>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d021      	beq.n	800585e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005822:	1d3a      	adds	r2, r7, #4
 8005824:	f107 0108 	add.w	r1, r7, #8
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe f8db 	bl	80039e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	9202      	str	r2, [sp, #8]
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	2302      	movs	r3, #2
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	460a      	mov	r2, r1
 8005844:	4910      	ldr	r1, [pc, #64]	; (8005888 <xTimerCreateTimerTask+0x84>)
 8005846:	4811      	ldr	r0, [pc, #68]	; (800588c <xTimerCreateTimerTask+0x88>)
 8005848:	f7fe ff3a 	bl	80046c0 <xTaskCreateStatic>
 800584c:	4603      	mov	r3, r0
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <xTimerCreateTimerTask+0x8c>)
 8005850:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005852:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <xTimerCreateTimerTask+0x8c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800585a:	2301      	movs	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	613b      	str	r3, [r7, #16]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800587a:	697b      	ldr	r3, [r7, #20]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000f24 	.word	0x20000f24
 8005888:	08006868 	.word	0x08006868
 800588c:	080059b1 	.word	0x080059b1
 8005890:	20000f28 	.word	0x20000f28

08005894 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	; 0x28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	623b      	str	r3, [r7, #32]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058c2:	4b1a      	ldr	r3, [pc, #104]	; (800592c <xTimerGenericCommand+0x98>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02a      	beq.n	8005920 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b05      	cmp	r3, #5
 80058da:	dc18      	bgt.n	800590e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058dc:	f7ff fd36 	bl	800534c <xTaskGetSchedulerState>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d109      	bne.n	80058fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <xTimerGenericCommand+0x98>)
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	f107 0110 	add.w	r1, r7, #16
 80058ee:	2300      	movs	r3, #0
 80058f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f2:	f7fe fa83 	bl	8003dfc <xQueueGenericSend>
 80058f6:	6278      	str	r0, [r7, #36]	; 0x24
 80058f8:	e012      	b.n	8005920 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <xTimerGenericCommand+0x98>)
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	f107 0110 	add.w	r1, r7, #16
 8005902:	2300      	movs	r3, #0
 8005904:	2200      	movs	r2, #0
 8005906:	f7fe fa79 	bl	8003dfc <xQueueGenericSend>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24
 800590c:	e008      	b.n	8005920 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800590e:	4b07      	ldr	r3, [pc, #28]	; (800592c <xTimerGenericCommand+0x98>)
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	f107 0110 	add.w	r1, r7, #16
 8005916:	2300      	movs	r3, #0
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	f7fe fb6d 	bl	8003ff8 <xQueueGenericSendFromISR>
 800591e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005922:	4618      	mov	r0, r3
 8005924:	3728      	adds	r7, #40	; 0x28
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000f24 	.word	0x20000f24

08005930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800593a:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <prvProcessExpiredTimer+0x7c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3304      	adds	r3, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe f8ed 	bl	8003b28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d122      	bne.n	800599c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	18d1      	adds	r1, r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f000 f8c8 	bl	8005af8 <prvInsertTimerInActiveList>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800596e:	2300      	movs	r3, #0
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	2100      	movs	r1, #0
 8005978:	6978      	ldr	r0, [r7, #20]
 800597a:	f7ff ff8b 	bl	8005894 <xTimerGenericCommand>
 800597e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	6978      	ldr	r0, [r7, #20]
 80059a2:	4798      	blx	r3
}
 80059a4:	bf00      	nop
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000f1c 	.word	0x20000f1c

080059b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059b8:	f107 0308 	add.w	r3, r7, #8
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 f857 	bl	8005a70 <prvGetNextExpireTime>
 80059c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f803 	bl	80059d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059ce:	f000 f8d5 	bl	8005b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059d2:	e7f1      	b.n	80059b8 <prvTimerTask+0x8>

080059d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059de:	f7ff f8c3 	bl	8004b68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f866 	bl	8005ab8 <prvSampleTimeNow>
 80059ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d130      	bne.n	8005a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <prvProcessTimerOrBlockTask+0x3c>
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d806      	bhi.n	8005a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a02:	f7ff f8bf 	bl	8004b84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff ff91 	bl	8005930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a0e:	e024      	b.n	8005a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a16:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <prvProcessTimerOrBlockTask+0x90>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <prvProcessTimerOrBlockTask+0x94>)
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	4619      	mov	r1, r3
 8005a36:	f7fe fe0f 	bl	8004658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a3a:	f7ff f8a3 	bl	8004b84 <xTaskResumeAll>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <prvProcessTimerOrBlockTask+0x98>)
 8005a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	f3bf 8f6f 	isb	sy
}
 8005a54:	e001      	b.n	8005a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a56:	f7ff f895 	bl	8004b84 <xTaskResumeAll>
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000f20 	.word	0x20000f20
 8005a68:	20000f24 	.word	0x20000f24
 8005a6c:	e000ed04 	.word	0xe000ed04

08005a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a78:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <prvGetNextExpireTime+0x44>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <prvGetNextExpireTime+0x44>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e001      	b.n	8005aa6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000f1c 	.word	0x20000f1c

08005ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ac0:	f7ff f8fe 	bl	8004cc0 <xTaskGetTickCount>
 8005ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <prvSampleTimeNow+0x3c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d205      	bcs.n	8005adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ad0:	f000 f908 	bl	8005ce4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ae2:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <prvSampleTimeNow+0x3c>)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000f2c 	.word	0x20000f2c

08005af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d812      	bhi.n	8005b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	1ad2      	subs	r2, r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e01b      	b.n	8005b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b32:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <prvInsertTimerInActiveList+0x7c>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7fd ffbb 	bl	8003ab8 <vListInsert>
 8005b42:	e012      	b.n	8005b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d206      	bcs.n	8005b5a <prvInsertTimerInActiveList+0x62>
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d302      	bcc.n	8005b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	e007      	b.n	8005b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <prvInsertTimerInActiveList+0x80>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f7fd ffa7 	bl	8003ab8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b6a:	697b      	ldr	r3, [r7, #20]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000f20 	.word	0x20000f20
 8005b78:	20000f1c 	.word	0x20000f1c

08005b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08e      	sub	sp, #56	; 0x38
 8005b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b82:	e09d      	b.n	8005cc0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da18      	bge.n	8005bbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	61fb      	str	r3, [r7, #28]
}
 8005ba8:	bf00      	nop
 8005baa:	e7fe      	b.n	8005baa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb2:	6850      	ldr	r0, [r2, #4]
 8005bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb6:	6892      	ldr	r2, [r2, #8]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	db7d      	blt.n	8005cbe <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fd ffa8 	bl	8003b28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bd8:	463b      	mov	r3, r7
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ff6c 	bl	8005ab8 <prvSampleTimeNow>
 8005be0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b09      	cmp	r3, #9
 8005be6:	d86b      	bhi.n	8005cc0 <prvProcessReceivedCommands+0x144>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <prvProcessReceivedCommands+0x74>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c19 	.word	0x08005c19
 8005bf4:	08005c19 	.word	0x08005c19
 8005bf8:	08005c19 	.word	0x08005c19
 8005bfc:	08005cc1 	.word	0x08005cc1
 8005c00:	08005c75 	.word	0x08005c75
 8005c04:	08005cad 	.word	0x08005cad
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c19 	.word	0x08005c19
 8005c10:	08005cc1 	.word	0x08005cc1
 8005c14:	08005c75 	.word	0x08005c75
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	18d1      	adds	r1, r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c26:	f7ff ff67 	bl	8005af8 <prvInsertTimerInActiveList>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d047      	beq.n	8005cc0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c36:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d13f      	bne.n	8005cc0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	441a      	add	r2, r3
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2100      	movs	r1, #0
 8005c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c52:	f7ff fe1f 	bl	8005894 <xTimerGenericCommand>
 8005c56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d130      	bne.n	8005cc0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	61bb      	str	r3, [r7, #24]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	617b      	str	r3, [r7, #20]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	18d1      	adds	r1, r2, r3
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca6:	f7ff ff27 	bl	8005af8 <prvInsertTimerInActiveList>
					break;
 8005caa:	e009      	b.n	8005cc0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb8:	f000 fb6c 	bl	8006394 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cbc:	e000      	b.n	8005cc0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005cbe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <prvProcessReceivedCommands+0x164>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	1d39      	adds	r1, r7, #4
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fe fa2d 	bl	8004128 <xQueueReceive>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f47f af57 	bne.w	8005b84 <prvProcessReceivedCommands+0x8>
	}
}
 8005cd6:	bf00      	nop
 8005cd8:	bf00      	nop
 8005cda:	3730      	adds	r7, #48	; 0x30
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000f24 	.word	0x20000f24

08005ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cea:	e045      	b.n	8005d78 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cec:	4b2c      	ldr	r3, [pc, #176]	; (8005da0 <prvSwitchTimerLists+0xbc>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cf6:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <prvSwitchTimerLists+0xbc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fd ff0f 	bl	8003b28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d12e      	bne.n	8005d78 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4413      	add	r3, r2
 8005d22:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d90e      	bls.n	8005d4a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d38:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <prvSwitchTimerLists+0xbc>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f7fd feb8 	bl	8003ab8 <vListInsert>
 8005d48:	e016      	b.n	8005d78 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	2100      	movs	r1, #0
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fd9d 	bl	8005894 <xTimerGenericCommand>
 8005d5a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	603b      	str	r3, [r7, #0]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <prvSwitchTimerLists+0xbc>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1b4      	bne.n	8005cec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <prvSwitchTimerLists+0xbc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <prvSwitchTimerLists+0xc0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <prvSwitchTimerLists+0xbc>)
 8005d8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d90:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <prvSwitchTimerLists+0xc0>)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	6013      	str	r3, [r2, #0]
}
 8005d96:	bf00      	nop
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000f1c 	.word	0x20000f1c
 8005da4:	20000f20 	.word	0x20000f20

08005da8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005dae:	f000 f92d 	bl	800600c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <prvCheckForValidListAndQueue+0x60>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d120      	bne.n	8005dfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dba:	4814      	ldr	r0, [pc, #80]	; (8005e0c <prvCheckForValidListAndQueue+0x64>)
 8005dbc:	f7fd fe2e 	bl	8003a1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dc0:	4813      	ldr	r0, [pc, #76]	; (8005e10 <prvCheckForValidListAndQueue+0x68>)
 8005dc2:	f7fd fe2b 	bl	8003a1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <prvCheckForValidListAndQueue+0x6c>)
 8005dc8:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <prvCheckForValidListAndQueue+0x64>)
 8005dca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <prvCheckForValidListAndQueue+0x70>)
 8005dce:	4a10      	ldr	r2, [pc, #64]	; (8005e10 <prvCheckForValidListAndQueue+0x68>)
 8005dd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <prvCheckForValidListAndQueue+0x74>)
 8005dd8:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <prvCheckForValidListAndQueue+0x78>)
 8005dda:	2110      	movs	r1, #16
 8005ddc:	200a      	movs	r0, #10
 8005dde:	f7fd ff35 	bl	8003c4c <xQueueGenericCreateStatic>
 8005de2:	4603      	mov	r3, r0
 8005de4:	4a08      	ldr	r2, [pc, #32]	; (8005e08 <prvCheckForValidListAndQueue+0x60>)
 8005de6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <prvCheckForValidListAndQueue+0x60>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <prvCheckForValidListAndQueue+0x60>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	490b      	ldr	r1, [pc, #44]	; (8005e24 <prvCheckForValidListAndQueue+0x7c>)
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fc06 	bl	8004608 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dfc:	f000 f936 	bl	800606c <vPortExitCritical>
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000f24 	.word	0x20000f24
 8005e0c:	20000ef4 	.word	0x20000ef4
 8005e10:	20000f08 	.word	0x20000f08
 8005e14:	20000f1c 	.word	0x20000f1c
 8005e18:	20000f20 	.word	0x20000f20
 8005e1c:	20000fd0 	.word	0x20000fd0
 8005e20:	20000f30 	.word	0x20000f30
 8005e24:	08006870 	.word	0x08006870

08005e28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3b04      	subs	r3, #4
 8005e38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3b04      	subs	r3, #4
 8005e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f023 0201 	bic.w	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3b04      	subs	r3, #4
 8005e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e58:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <pxPortInitialiseStack+0x54>)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3b14      	subs	r3, #20
 8005e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3b20      	subs	r3, #32
 8005e6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e70:	68fb      	ldr	r3, [r7, #12]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	08005e81 	.word	0x08005e81

08005e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e8a:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <prvTaskExitError+0x54>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e92:	d00a      	beq.n	8005eaa <prvTaskExitError+0x2a>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	60fb      	str	r3, [r7, #12]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <prvTaskExitError+0x28>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	60bb      	str	r3, [r7, #8]
}
 8005ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ebe:	bf00      	nop
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0fc      	beq.n	8005ec0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c
	...

08005ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <pxCurrentTCBConst2>)
 8005ee2:	6819      	ldr	r1, [r3, #0]
 8005ee4:	6808      	ldr	r0, [r1, #0]
 8005ee6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005eea:	f380 8809 	msr	PSP, r0
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f380 8811 	msr	BASEPRI, r0
 8005efa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005efe:	4770      	bx	lr

08005f00 <pxCurrentTCBConst2>:
 8005f00:	200009f4 	.word	0x200009f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005f08:	4806      	ldr	r0, [pc, #24]	; (8005f24 <prvPortStartFirstTask+0x1c>)
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	6800      	ldr	r0, [r0, #0]
 8005f0e:	f380 8808 	msr	MSP, r0
 8005f12:	b662      	cpsie	i
 8005f14:	b661      	cpsie	f
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	df00      	svc	0
 8005f20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f22:	bf00      	nop
 8005f24:	e000ed08 	.word	0xe000ed08

08005f28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f2e:	4b32      	ldr	r3, [pc, #200]	; (8005ff8 <xPortStartScheduler+0xd0>)
 8005f30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	22ff      	movs	r2, #255	; 0xff
 8005f3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <xPortStartScheduler+0xd4>)
 8005f54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f56:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <xPortStartScheduler+0xd8>)
 8005f58:	2207      	movs	r2, #7
 8005f5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f5c:	e009      	b.n	8005f72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f5e:	4b28      	ldr	r3, [pc, #160]	; (8006000 <xPortStartScheduler+0xd8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	4a26      	ldr	r2, [pc, #152]	; (8006000 <xPortStartScheduler+0xd8>)
 8005f66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d0ef      	beq.n	8005f5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f7e:	4b20      	ldr	r3, [pc, #128]	; (8006000 <xPortStartScheduler+0xd8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f1c3 0307 	rsb	r3, r3, #7
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d00a      	beq.n	8005fa0 <xPortStartScheduler+0x78>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	60bb      	str	r3, [r7, #8]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fa0:	4b17      	ldr	r3, [pc, #92]	; (8006000 <xPortStartScheduler+0xd8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <xPortStartScheduler+0xd8>)
 8005fa8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005faa:	4b15      	ldr	r3, [pc, #84]	; (8006000 <xPortStartScheduler+0xd8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fb2:	4a13      	ldr	r2, [pc, #76]	; (8006000 <xPortStartScheduler+0xd8>)
 8005fb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fbe:	4b11      	ldr	r3, [pc, #68]	; (8006004 <xPortStartScheduler+0xdc>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a10      	ldr	r2, [pc, #64]	; (8006004 <xPortStartScheduler+0xdc>)
 8005fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fca:	4b0e      	ldr	r3, [pc, #56]	; (8006004 <xPortStartScheduler+0xdc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a0d      	ldr	r2, [pc, #52]	; (8006004 <xPortStartScheduler+0xdc>)
 8005fd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fd6:	f000 f8b9 	bl	800614c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fda:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <xPortStartScheduler+0xe0>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fe0:	f7ff ff92 	bl	8005f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fe4:	f7fe ff38 	bl	8004e58 <vTaskSwitchContext>
	prvTaskExitError();
 8005fe8:	f7ff ff4a 	bl	8005e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	e000e400 	.word	0xe000e400
 8005ffc:	20001020 	.word	0x20001020
 8006000:	20001024 	.word	0x20001024
 8006004:	e000ed20 	.word	0xe000ed20
 8006008:	2000000c 	.word	0x2000000c

0800600c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	607b      	str	r3, [r7, #4]
}
 8006024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <vPortEnterCritical+0x58>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <vPortEnterCritical+0x58>)
 800602e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <vPortEnterCritical+0x58>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d10f      	bne.n	8006058 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006038:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <vPortEnterCritical+0x5c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <vPortEnterCritical+0x4c>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	603b      	str	r3, [r7, #0]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <vPortEnterCritical+0x4a>
	}
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	2000000c 	.word	0x2000000c
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006072:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <vPortExitCritical+0x4c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <vPortExitCritical+0x24>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	607b      	str	r3, [r7, #4]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <vPortExitCritical+0x4c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3b01      	subs	r3, #1
 8006096:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <vPortExitCritical+0x4c>)
 8006098:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <vPortExitCritical+0x4c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d105      	bne.n	80060ae <vPortExitCritical+0x42>
 80060a2:	2300      	movs	r3, #0
 80060a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	f383 8811 	msr	BASEPRI, r3
}
 80060ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr
 80060b8:	2000000c 	.word	0x2000000c
 80060bc:	00000000 	.word	0x00000000

080060c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060c0:	f3ef 8009 	mrs	r0, PSP
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <pxCurrentTCBConst>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060d0:	6010      	str	r0, [r2, #0]
 80060d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80060d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060da:	f380 8811 	msr	BASEPRI, r0
 80060de:	f7fe febb 	bl	8004e58 <vTaskSwitchContext>
 80060e2:	f04f 0000 	mov.w	r0, #0
 80060e6:	f380 8811 	msr	BASEPRI, r0
 80060ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060ee:	6819      	ldr	r1, [r3, #0]
 80060f0:	6808      	ldr	r0, [r1, #0]
 80060f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060f6:	f380 8809 	msr	PSP, r0
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	4770      	bx	lr

08006100 <pxCurrentTCBConst>:
 8006100:	200009f4 	.word	0x200009f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006122:	f7fe fddb 	bl	8004cdc <xTaskIncrementTick>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <SysTick_Handler+0x40>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f383 8811 	msr	BASEPRI, r3
}
 800613e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <vPortSetupTimerInterrupt+0x30>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <vPortSetupTimerInterrupt+0x34>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <vPortSetupTimerInterrupt+0x38>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a09      	ldr	r2, [pc, #36]	; (8006188 <vPortSetupTimerInterrupt+0x3c>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	4a08      	ldr	r2, [pc, #32]	; (800618c <vPortSetupTimerInterrupt+0x40>)
 800616a:	3b01      	subs	r3, #1
 800616c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800616e:	4b03      	ldr	r3, [pc, #12]	; (800617c <vPortSetupTimerInterrupt+0x30>)
 8006170:	2207      	movs	r2, #7
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr
 800617c:	e000e010 	.word	0xe000e010
 8006180:	e000e018 	.word	0xe000e018
 8006184:	20000000 	.word	0x20000000
 8006188:	10624dd3 	.word	0x10624dd3
 800618c:	e000e014 	.word	0xe000e014

08006190 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006196:	f3ef 8305 	mrs	r3, IPSR
 800619a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b0f      	cmp	r3, #15
 80061a0:	d914      	bls.n	80061cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061a2:	4a16      	ldr	r2, [pc, #88]	; (80061fc <vPortValidateInterruptPriority+0x6c>)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061ac:	4b14      	ldr	r3, [pc, #80]	; (8006200 <vPortValidateInterruptPriority+0x70>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	7afa      	ldrb	r2, [r7, #11]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d20a      	bcs.n	80061cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	607b      	str	r3, [r7, #4]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061cc:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <vPortValidateInterruptPriority+0x74>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <vPortValidateInterruptPriority+0x78>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d90a      	bls.n	80061f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	603b      	str	r3, [r7, #0]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <vPortValidateInterruptPriority+0x60>
	}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr
 80061fc:	e000e3f0 	.word	0xe000e3f0
 8006200:	20001020 	.word	0x20001020
 8006204:	e000ed0c 	.word	0xe000ed0c
 8006208:	20001024 	.word	0x20001024

0800620c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	; 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006218:	f7fe fca6 	bl	8004b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800621c:	4b58      	ldr	r3, [pc, #352]	; (8006380 <pvPortMalloc+0x174>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006224:	f000 f910 	bl	8006448 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006228:	4b56      	ldr	r3, [pc, #344]	; (8006384 <pvPortMalloc+0x178>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 808e 	bne.w	8006352 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01d      	beq.n	8006278 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800623c:	2208      	movs	r2, #8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4413      	add	r3, r2
 8006242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	2b00      	cmp	r3, #0
 800624c:	d014      	beq.n	8006278 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f023 0307 	bic.w	r3, r3, #7
 8006254:	3308      	adds	r3, #8
 8006256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <pvPortMalloc+0x6c>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	617b      	str	r3, [r7, #20]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d069      	beq.n	8006352 <pvPortMalloc+0x146>
 800627e:	4b42      	ldr	r3, [pc, #264]	; (8006388 <pvPortMalloc+0x17c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d864      	bhi.n	8006352 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006288:	4b40      	ldr	r3, [pc, #256]	; (800638c <pvPortMalloc+0x180>)
 800628a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800628c:	4b3f      	ldr	r3, [pc, #252]	; (800638c <pvPortMalloc+0x180>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006292:	e004      	b.n	800629e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d903      	bls.n	80062b0 <pvPortMalloc+0xa4>
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f1      	bne.n	8006294 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062b0:	4b33      	ldr	r3, [pc, #204]	; (8006380 <pvPortMalloc+0x174>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d04b      	beq.n	8006352 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2208      	movs	r2, #8
 80062c0:	4413      	add	r3, r2
 80062c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	1ad2      	subs	r2, r2, r3
 80062d4:	2308      	movs	r3, #8
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	429a      	cmp	r2, r3
 80062da:	d91f      	bls.n	800631c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <pvPortMalloc+0xf8>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	613b      	str	r3, [r7, #16]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006316:	69b8      	ldr	r0, [r7, #24]
 8006318:	f000 f8f8 	bl	800650c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800631c:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <pvPortMalloc+0x17c>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	4a18      	ldr	r2, [pc, #96]	; (8006388 <pvPortMalloc+0x17c>)
 8006328:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800632a:	4b17      	ldr	r3, [pc, #92]	; (8006388 <pvPortMalloc+0x17c>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b18      	ldr	r3, [pc, #96]	; (8006390 <pvPortMalloc+0x184>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d203      	bcs.n	800633e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <pvPortMalloc+0x17c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a15      	ldr	r2, [pc, #84]	; (8006390 <pvPortMalloc+0x184>)
 800633c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	4b10      	ldr	r3, [pc, #64]	; (8006384 <pvPortMalloc+0x178>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	431a      	orrs	r2, r3
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006352:	f7fe fc17 	bl	8004b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <pvPortMalloc+0x16a>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	60fb      	str	r3, [r7, #12]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <pvPortMalloc+0x168>
	return pvReturn;
 8006376:	69fb      	ldr	r3, [r7, #28]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3728      	adds	r7, #40	; 0x28
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20002430 	.word	0x20002430
 8006384:	2000243c 	.word	0x2000243c
 8006388:	20002434 	.word	0x20002434
 800638c:	20002428 	.word	0x20002428
 8006390:	20002438 	.word	0x20002438

08006394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d048      	beq.n	8006438 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063a6:	2308      	movs	r3, #8
 80063a8:	425b      	negs	r3, r3
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4413      	add	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	4b21      	ldr	r3, [pc, #132]	; (8006440 <vPortFree+0xac>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4013      	ands	r3, r2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <vPortFree+0x44>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60fb      	str	r3, [r7, #12]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <vPortFree+0x62>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60bb      	str	r3, [r7, #8]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	4b11      	ldr	r3, [pc, #68]	; (8006440 <vPortFree+0xac>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d019      	beq.n	8006438 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d115      	bne.n	8006438 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <vPortFree+0xac>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	43db      	mvns	r3, r3
 8006416:	401a      	ands	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800641c:	f7fe fba4 	bl	8004b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	4b07      	ldr	r3, [pc, #28]	; (8006444 <vPortFree+0xb0>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4413      	add	r3, r2
 800642a:	4a06      	ldr	r2, [pc, #24]	; (8006444 <vPortFree+0xb0>)
 800642c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800642e:	6938      	ldr	r0, [r7, #16]
 8006430:	f000 f86c 	bl	800650c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006434:	f7fe fba6 	bl	8004b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006438:	bf00      	nop
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	2000243c 	.word	0x2000243c
 8006444:	20002434 	.word	0x20002434

08006448 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800644e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006452:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006454:	4b27      	ldr	r3, [pc, #156]	; (80064f4 <prvHeapInit+0xac>)
 8006456:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3307      	adds	r3, #7
 8006466:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0307 	bic.w	r3, r3, #7
 800646e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <prvHeapInit+0xac>)
 8006478:	4413      	add	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006480:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <prvHeapInit+0xb0>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006486:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <prvHeapInit+0xb0>)
 8006488:	2200      	movs	r2, #0
 800648a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	4413      	add	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006494:	2208      	movs	r2, #8
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0307 	bic.w	r3, r3, #7
 80064a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <prvHeapInit+0xb4>)
 80064a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064aa:	4b14      	ldr	r3, [pc, #80]	; (80064fc <prvHeapInit+0xb4>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <prvHeapInit+0xb4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <prvHeapInit+0xb4>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <prvHeapInit+0xb8>)
 80064d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a09      	ldr	r2, [pc, #36]	; (8006504 <prvHeapInit+0xbc>)
 80064de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064e0:	4b09      	ldr	r3, [pc, #36]	; (8006508 <prvHeapInit+0xc0>)
 80064e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064e6:	601a      	str	r2, [r3, #0]
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20001028 	.word	0x20001028
 80064f8:	20002428 	.word	0x20002428
 80064fc:	20002430 	.word	0x20002430
 8006500:	20002438 	.word	0x20002438
 8006504:	20002434 	.word	0x20002434
 8006508:	2000243c 	.word	0x2000243c

0800650c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006514:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <prvInsertBlockIntoFreeList+0xa8>)
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	e002      	b.n	8006520 <prvInsertBlockIntoFreeList+0x14>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	429a      	cmp	r2, r3
 8006528:	d8f7      	bhi.n	800651a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4413      	add	r3, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d108      	bne.n	800654e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	441a      	add	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	441a      	add	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d118      	bne.n	8006594 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <prvInsertBlockIntoFreeList+0xac>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d00d      	beq.n	800658a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	441a      	add	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e008      	b.n	800659c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <prvInsertBlockIntoFreeList+0xac>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	e003      	b.n	800659c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d002      	beq.n	80065aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr
 80065b4:	20002428 	.word	0x20002428
 80065b8:	20002430 	.word	0x20002430

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	2600      	movs	r6, #0
 80065c0:	4d0c      	ldr	r5, [pc, #48]	; (80065f4 <__libc_init_array+0x38>)
 80065c2:	4c0d      	ldr	r4, [pc, #52]	; (80065f8 <__libc_init_array+0x3c>)
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	42a6      	cmp	r6, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	f000 f8e4 	bl	8006798 <_init>
 80065d0:	2600      	movs	r6, #0
 80065d2:	4d0a      	ldr	r5, [pc, #40]	; (80065fc <__libc_init_array+0x40>)
 80065d4:	4c0a      	ldr	r4, [pc, #40]	; (8006600 <__libc_init_array+0x44>)
 80065d6:	1b64      	subs	r4, r4, r5
 80065d8:	10a4      	asrs	r4, r4, #2
 80065da:	42a6      	cmp	r6, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e4:	4798      	blx	r3
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ee:	4798      	blx	r3
 80065f0:	3601      	adds	r6, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	08006950 	.word	0x08006950
 80065f8:	08006950 	.word	0x08006950
 80065fc:	08006950 	.word	0x08006950
 8006600:	08006954 	.word	0x08006954

08006604 <memcpy>:
 8006604:	440a      	add	r2, r1
 8006606:	4291      	cmp	r1, r2
 8006608:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800660c:	d100      	bne.n	8006610 <memcpy+0xc>
 800660e:	4770      	bx	lr
 8006610:	b510      	push	{r4, lr}
 8006612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006616:	4291      	cmp	r1, r2
 8006618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661c:	d1f9      	bne.n	8006612 <memcpy+0xe>
 800661e:	bd10      	pop	{r4, pc}

08006620 <memset>:
 8006620:	4603      	mov	r3, r0
 8006622:	4402      	add	r2, r0
 8006624:	4293      	cmp	r3, r2
 8006626:	d100      	bne.n	800662a <memset+0xa>
 8006628:	4770      	bx	lr
 800662a:	f803 1b01 	strb.w	r1, [r3], #1
 800662e:	e7f9      	b.n	8006624 <memset+0x4>

08006630 <cleanup_glue>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	460c      	mov	r4, r1
 8006634:	6809      	ldr	r1, [r1, #0]
 8006636:	4605      	mov	r5, r0
 8006638:	b109      	cbz	r1, 800663e <cleanup_glue+0xe>
 800663a:	f7ff fff9 	bl	8006630 <cleanup_glue>
 800663e:	4621      	mov	r1, r4
 8006640:	4628      	mov	r0, r5
 8006642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006646:	f000 b85f 	b.w	8006708 <_free_r>
	...

0800664c <_reclaim_reent>:
 800664c:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <_reclaim_reent+0xb4>)
 800664e:	b570      	push	{r4, r5, r6, lr}
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4604      	mov	r4, r0
 8006654:	4283      	cmp	r3, r0
 8006656:	d051      	beq.n	80066fc <_reclaim_reent+0xb0>
 8006658:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800665a:	b143      	cbz	r3, 800666e <_reclaim_reent+0x22>
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d14a      	bne.n	80066f8 <_reclaim_reent+0xac>
 8006662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006664:	6819      	ldr	r1, [r3, #0]
 8006666:	b111      	cbz	r1, 800666e <_reclaim_reent+0x22>
 8006668:	4620      	mov	r0, r4
 800666a:	f000 f84d 	bl	8006708 <_free_r>
 800666e:	6961      	ldr	r1, [r4, #20]
 8006670:	b111      	cbz	r1, 8006678 <_reclaim_reent+0x2c>
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f848 	bl	8006708 <_free_r>
 8006678:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800667a:	b111      	cbz	r1, 8006682 <_reclaim_reent+0x36>
 800667c:	4620      	mov	r0, r4
 800667e:	f000 f843 	bl	8006708 <_free_r>
 8006682:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006684:	b111      	cbz	r1, 800668c <_reclaim_reent+0x40>
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f83e 	bl	8006708 <_free_r>
 800668c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800668e:	b111      	cbz	r1, 8006696 <_reclaim_reent+0x4a>
 8006690:	4620      	mov	r0, r4
 8006692:	f000 f839 	bl	8006708 <_free_r>
 8006696:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006698:	b111      	cbz	r1, 80066a0 <_reclaim_reent+0x54>
 800669a:	4620      	mov	r0, r4
 800669c:	f000 f834 	bl	8006708 <_free_r>
 80066a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80066a2:	b111      	cbz	r1, 80066aa <_reclaim_reent+0x5e>
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 f82f 	bl	8006708 <_free_r>
 80066aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80066ac:	b111      	cbz	r1, 80066b4 <_reclaim_reent+0x68>
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f82a 	bl	8006708 <_free_r>
 80066b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b6:	b111      	cbz	r1, 80066be <_reclaim_reent+0x72>
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f825 	bl	8006708 <_free_r>
 80066be:	69a3      	ldr	r3, [r4, #24]
 80066c0:	b1e3      	cbz	r3, 80066fc <_reclaim_reent+0xb0>
 80066c2:	4620      	mov	r0, r4
 80066c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066c6:	4798      	blx	r3
 80066c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80066ca:	b1b9      	cbz	r1, 80066fc <_reclaim_reent+0xb0>
 80066cc:	4620      	mov	r0, r4
 80066ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066d2:	f7ff bfad 	b.w	8006630 <cleanup_glue>
 80066d6:	5949      	ldr	r1, [r1, r5]
 80066d8:	b941      	cbnz	r1, 80066ec <_reclaim_reent+0xa0>
 80066da:	3504      	adds	r5, #4
 80066dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066de:	2d80      	cmp	r5, #128	; 0x80
 80066e0:	68d9      	ldr	r1, [r3, #12]
 80066e2:	d1f8      	bne.n	80066d6 <_reclaim_reent+0x8a>
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 f80f 	bl	8006708 <_free_r>
 80066ea:	e7ba      	b.n	8006662 <_reclaim_reent+0x16>
 80066ec:	680e      	ldr	r6, [r1, #0]
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 f80a 	bl	8006708 <_free_r>
 80066f4:	4631      	mov	r1, r6
 80066f6:	e7ef      	b.n	80066d8 <_reclaim_reent+0x8c>
 80066f8:	2500      	movs	r5, #0
 80066fa:	e7ef      	b.n	80066dc <_reclaim_reent+0x90>
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	bf00      	nop
 8006700:	20000010 	.word	0x20000010

08006704 <__malloc_lock>:
 8006704:	4770      	bx	lr

08006706 <__malloc_unlock>:
 8006706:	4770      	bx	lr

08006708 <_free_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4605      	mov	r5, r0
 800670c:	2900      	cmp	r1, #0
 800670e:	d040      	beq.n	8006792 <_free_r+0x8a>
 8006710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006714:	1f0c      	subs	r4, r1, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	bfb8      	it	lt
 800671a:	18e4      	addlt	r4, r4, r3
 800671c:	f7ff fff2 	bl	8006704 <__malloc_lock>
 8006720:	4a1c      	ldr	r2, [pc, #112]	; (8006794 <_free_r+0x8c>)
 8006722:	6813      	ldr	r3, [r2, #0]
 8006724:	b933      	cbnz	r3, 8006734 <_free_r+0x2c>
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	6014      	str	r4, [r2, #0]
 800672a:	4628      	mov	r0, r5
 800672c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006730:	f7ff bfe9 	b.w	8006706 <__malloc_unlock>
 8006734:	42a3      	cmp	r3, r4
 8006736:	d908      	bls.n	800674a <_free_r+0x42>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	1821      	adds	r1, r4, r0
 800673c:	428b      	cmp	r3, r1
 800673e:	bf01      	itttt	eq
 8006740:	6819      	ldreq	r1, [r3, #0]
 8006742:	685b      	ldreq	r3, [r3, #4]
 8006744:	1809      	addeq	r1, r1, r0
 8006746:	6021      	streq	r1, [r4, #0]
 8006748:	e7ed      	b.n	8006726 <_free_r+0x1e>
 800674a:	461a      	mov	r2, r3
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b10b      	cbz	r3, 8006754 <_free_r+0x4c>
 8006750:	42a3      	cmp	r3, r4
 8006752:	d9fa      	bls.n	800674a <_free_r+0x42>
 8006754:	6811      	ldr	r1, [r2, #0]
 8006756:	1850      	adds	r0, r2, r1
 8006758:	42a0      	cmp	r0, r4
 800675a:	d10b      	bne.n	8006774 <_free_r+0x6c>
 800675c:	6820      	ldr	r0, [r4, #0]
 800675e:	4401      	add	r1, r0
 8006760:	1850      	adds	r0, r2, r1
 8006762:	4283      	cmp	r3, r0
 8006764:	6011      	str	r1, [r2, #0]
 8006766:	d1e0      	bne.n	800672a <_free_r+0x22>
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4408      	add	r0, r1
 800676e:	6010      	str	r0, [r2, #0]
 8006770:	6053      	str	r3, [r2, #4]
 8006772:	e7da      	b.n	800672a <_free_r+0x22>
 8006774:	d902      	bls.n	800677c <_free_r+0x74>
 8006776:	230c      	movs	r3, #12
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	e7d6      	b.n	800672a <_free_r+0x22>
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	1821      	adds	r1, r4, r0
 8006780:	428b      	cmp	r3, r1
 8006782:	bf01      	itttt	eq
 8006784:	6819      	ldreq	r1, [r3, #0]
 8006786:	685b      	ldreq	r3, [r3, #4]
 8006788:	1809      	addeq	r1, r1, r0
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	6063      	str	r3, [r4, #4]
 800678e:	6054      	str	r4, [r2, #4]
 8006790:	e7cb      	b.n	800672a <_free_r+0x22>
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	20002440 	.word	0x20002440

08006798 <_init>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr

080067a4 <_fini>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr
